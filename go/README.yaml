インストールします:
    Linux on Vagrant の場合:
        VirtualBox をインストールします:
            - https://www.virtualbox.org/ >> Download VirtualBox X.X >> Windows hosts
            - ダウンロードしたファイル（例：VirtualBox-6.1.22-144080-Win.exe）を開きます
            - インストール オプションはデフォルトを使用
            - ドライバーはインストールします
        Vagrant をインストールします:
            - https://www.vagrantup.com/downloads.html >> Windows（タブ）>> 64-bit
            - ダウンロードしたファイル（例：vagrant_2.2.16_x86_64.msi）を開きます
            - インストール オプションはデフォルトを使用
            - PC を再起動します
        Visual Studio Code をインストールします:
            - https://code.visualstudio.com/
            - ダウンロードしたファイル（例：VSCodeUserSetup-x64-1.50.1.exe）を開きます
            - インストール オプションはデフォルトを使用
            - （推奨）VSCode (Visual Studio Code をタスクバーにピン止めします:
            - （推奨）Ctrl + S キーを押したときに全てのファイルを保存するように設定します: |
                VSCode >> File >> Preferences >> Keyboard Shortcuts >> save all （と入力） >>
                    File: Save All （をダブルクリック） >> Ctrl + S キー >> Enter キー
            - 下記の拡張機能(Extensions)をインストールします:
                - Remote Development
                - Copy Relative Path Posix  #// Copy Relative Path (POSIX) というメニューが追加されます
        Visual Studio Code で Git bash シェルを開きます:
            Visual Studio Code で プロジェクト フォルダーを開きます:
                - VSCode >> File >> Open Folder ... >> __Project__  #または
                - (shell) code __Project__
            Git bash シェルをデフォルトで開くようにします:  #label: VSCode Git bash
                VSCode >> Terminal >> New Terminal >> ＋の右の↓（シェルの右上）>>
                    Select Default Profile >> Git bash >> ゴミ箱 ボタン（シェルの右上）
            Git bash シェルを開きます:
                VSCode >> Terminal >> New Terminal
        vagrant-vbguest プラグインをインストールします:
            (@host) Git bash:
                vagrant plugin install vagrant-vbguest
        仮想マシンを作って起動します（プロビジョニングします）:
            (@host) Git bash:
                vagrant up  #// 10分近くかかります。プロンプトに戻ると完了です
        （未設定なら）SSH でホストOSから各仮想マシンにログインできるように設定します:
            VSCode の Remote Development 拡張機能をインストールします:
                VSCode >> 拡張機能 ボタン（左） >> Remote Development
            VSCode Git bash:
                - code ~/.ssh/config  #// 下記 vagrant ssh-config の出力を最後に貼り付けます
                - vagrant ssh-config  #// SSH の接続に必要な設定が表示されます。すべての VM の設定が一覧されます
            Visual Studio Code で SSH 接続します:
                Remote Explorer を最新の表示にします:
                    VSCode >> Remote Explorer（左のアイコン）>>
                    REMOTE EXPLORER = SSH Ttargets（右上）>> Reflesh ボタン（右上）
                vagrant フォルダーが表示されている場合:  #// VSCode >> Remote Explorer（左のアイコン）>> SSH Targets（左上）>> ホスト名 >> vagrant /:
                    その vagrant /（の右のフォルダー）ボタン
                vagrant フォルダーが表示されていない場合:
                    SSH 接続します:
                        VSCode >> Remote Explorer（左のアイコン）>> SSH Targets（左上）>> ホスト名（の右のフォルダー）ボタン >>
                            Linux
                    SSH 接続した Visual Studio Code でフォルダーを開きます:
                        VSCode >> File >> Open Folder ... >> /vagrant/
                    シェルを開けることを確認します:
                        VSCode >> Terminal >> New Terminal
                            #// [vagrant@localhost vagrant]$ と表示されます
                            #// 次回プロジェクトを開いたときにシェルが開いた状態になります
                    Remote Explorer で開いたフォルダーを表示させます:
                        VSCode >> Remote Explorer（左のアイコン）>> Reflesh ボタン（右上）
                開けたら Visual Studio Code を閉じます:
                次回からログインするときの操作:
                    - タスクバーの VSCode を右クリック >> __Folder__ [SSH:__Server__]  #// または
                    - VSCode >> File >> Open Recent >> __Folder__ [SSH:__Server__]  #// または
                    - VSCode >> Remote Explorer ボタン（左）>> REMOTE EXPLORER= SSH Targets >> __Server__ >> __Folder__
        作成したすべての VM の電源を切ります:
            VirtualBox マネージャー >> __ProjectFolderName___centos7____ などを選択して右クリック >>
                閉じる >> 電源オフ
        （必要なら）.vagrant フォルダーと VM のフォルダーをバックアップします:
            VM のフォルダー:
            .vagrant フォルダー:  #// VM の情報を持っています
        VM をリストアします:
            VM の電源を入れます:  #// VM の電源を入れてホストOS と SSH 接続できるようにします
                #// 現在の VM が電源オフの状態でも中断の状態（ホストOSをシャットダウンした後の状態）でも同じ手順です
                VSCode でホストOS の Vagrant プロジェクトを開きます:
                    タスクバーの VSCode を右クリック >> __Project__
                .vagrant フォルダーと VM のフォルダーをバックアップから元の場所に戻します:
                    VM のフォルダー:
                    .vagrant フォルダー:  #// VM の情報を持っています
                VirtualBox マネージャーに VM が表示されていない場合:
                    VirtualBox マネージャー >> 仮想マシン >> 追加
                vagrant を起動します:
                    (@host) Git bash:
                        vagrant up
        ログインします:
            メニュー: タスクバーの VSCode を右クリック >> vagrant [SSH:go]
            centos7 ノードが開けないとき: 上記 vagrant ssh-config を再実行してください
        Go 言語をインストールします:
            (@CentOS7):
                sudo yum install -y epel-release
                sudo yum install -y golang
                go version
    Windows の場合:
        インストールします:
            https://golang.org/dl/ >> Microsoft Windows .msi >> .msi をダブルクリック
        動作確認します:
            ターミナル:
                go version
            出力例:
                go version go1.16.6 windows/amd64
    mac の場合:
        インストールします:
            https://golang.org/dl/ >>
            Apple macOS (ARM64) または Apple macOS (x86-64) の .pkg >>
            .pkg をクリック >>（オプションはありません）
        動作確認します:
            ターミナル:
                go version
            出力例:
                go version go1.19 darwin/arm64
Go 言語のプログラムを実行します:
    プロジェクトを開きます:  #ref: ${GitHub}/Trials/go
        Vagrant on Windows の場合:
            タスクバーの VSCode を右クリック >> vagrant [SSH:go]
        それ以外のターミナルの場合:
            code ____/go
    （初回のみ）Go 言語に関する拡張機能をインストールします（と表示されたとき）:
        VSCod>> Install All
    シェルから実行する場合:
        ターミナル:
            go run example/1_hello/*.go
    VSCode のデバッガーで実行する場合:
        VSCode で package main が書かれたフォルダーを開きます:
            code example/1_hello
        ソース ファイル を開きます:
            hello.go
        （初回のみ）dlv をインストールします:  #// dlv は Go 言語のデバッグ用モジュールです
            F5 キー >> Install >>
            （macの場合）F5 キー >> mac のパスワードを入力
        デバッグを開始します:
            F5 キー
    ビルドする場合:
        現在の OS 用をビルドする場合:
            go build example/1_hello/hello.go
        Linux で Windows の実行ファイルを作る場合:
            GOOS=windows GOARCH=amd64  go build  example/1_hello/hello.go
