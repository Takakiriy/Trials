公開中の GitHub Pages の一部に書かれた今日の運勢をランダムに書き換えて公開するシェルスクリプトを作ってください。

ただし、スクリプトは以下のコーディングルールに従ってください。

- 最も上には、ヘルプを表示する関数、グローバル変数、CLI のオプションの解析をするスクリプト、Main 関数の順に書く
- 処理内容が関数名から読みやすくなる場合、関数を定義する
- 関数の引数は関数の最初で必ずローカル変数に代入する
- if 文で数値の比較をするときは (( )) で囲み、-eq などハイフンから始まる演算子ではなく == などの演算子を使う
- if 文の中で -n や -z を使わず ${var} == "" のように判定すること
- CLI のオプションの解析をするスクリプトは、if 文を使わず、添付の option_tepmlate.sh ファイルと完全に同じ形式でオプション解析部分を書いてください
- オプションの値を格納する変数名は Options_ から始めてください
- 1つのオプションに関する処理は、case に指定した変数と比較する値から最後の shift まで必ず 1行で書いてください
- Main 関数を定義する。関数コールツリーの深い関数を下のほうに書く
- インデントは空白4つ
- コメントの記号#のすぐ右に // を書くこと（#// から始める）
- ヘルプやコメントに、引数や置き換える部分を書くときは、<argument> 形式ではなく、Pascal スタイルでかき、先頭と末尾にアンダーバー2つ付ける
- exit を含む Error 関数を最も下（ただし Main 関数呼び出しより上）に定義すること
- エラーメッセージは、Error 関数の引数に渡して、それを Error 関数の中で表示すること
- set -e を使わないこと
- エラー判定には必ず __Command__  ||  Error  のように呼び出してください。
- すべての関数の中で、エラーを表す 0 以外の値を返す return を書かないで Error を呼び出してください
- 関数定義は function から始め、それに続く空白文字は2つにする
- 関数名は Pascal ケース
- グローバル変数名は Pascal ケース
- 変数を参照するときは "${ }" で囲む。ただし、関数の引数など変数名が数字のときは { } を書かず "$1" のように書く
- ローカル変数名は Camel ケースにして、local の右の空白文字は2つにする
- 呼び出す関数名やコマンド名や echo や return などの命令の右の空白文字は2つにする
- git などサブコマンドを呼び出すときは、コマンド名の右は空白文字1つ、サブコマンド名の右は空白文字2つにする
- パイプやリダイレクトの記号の前後は空白文字2つにする
- case 文は使用禁止
- $( ) で囲むコマンドは $( の右に空白文字を入れ、) の左に空白文字を入れる
