"use strict";
exports.__esModule = true;
var fs = require("fs");
var main = require("./main");
var path = require("path");
var lib = require("./lib");
var callMain = main.callMainFromJest;
if (path.basename(process.cwd()) !== 'src') {
    // Because the second execute of Jest watch mode is inherited the current folder.
    process.chdir('src');
}
// test
test('First', function () {
    callMain();
});
test('Check stdout', function () {
    callMain(['A', 'B'], { 'command': 'stdout' });
    expect(main.stdout).toBe('ABC\nDE\n["A","B"]\n');
});
test('locale', function () {
    var defaultLocale = Intl.NumberFormat().resolvedOptions().locale;
    callMain([], { 'command': 'show-locale' });
    expect(main.stdout).toBe(defaultLocale + '\n');
    callMain([], { 'command': 'show-locale', 'locale': 'fr-FR' });
    expect(main.stdout).toBe('fr-FR\n');
});
test('snapshot 1', function () {
    var inputText = lib.getSnapshot("snapshot 1: 1 sourceFileContents 1");
    var outputText = inputText.replace('input', 'output');
    expect(outputText).toMatchSnapshot('answer');
});
test("checks snapshots files are confirmed", function () {
    var activeSnapshots = fs.readFileSync('__snapshots__/main.test.ts.snap').toString();
    var backUpSnapshots = fs.readFileSync('__snapshots__/main.test.ts.snap.confirmed-ts').toString();
    // 拡張子の末尾を .snap にしない理由は、Jest が使っていない .snap ファイルを自動的に削除しようとするからです
    // ____.snap.confirmed-ts ファイルが存在する理由は、Jest の自動編集が予期しないデータを追加することがあるからです
    expect(activeSnapshots).toBe(backUpSnapshots);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21haW4udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVCQUF5QjtBQUN6Qiw2QkFBK0I7QUFDL0IsMkJBQTZCO0FBQzdCLDJCQUE2QjtBQUM3QixJQUFPLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7QUFFeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEtBQUssRUFBRTtJQUN4QyxpRkFBaUY7SUFDakYsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN4QjtBQUVELE9BQU87QUFDUCxJQUFJLENBQUMsT0FBTyxFQUFFO0lBQ1YsUUFBUSxFQUFFLENBQUM7QUFDZixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxjQUFjLEVBQUU7SUFDakIsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUMsU0FBUyxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDWCxJQUFPLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsTUFBTSxDQUFDO0lBRXBFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBQyxTQUFTLEVBQUUsYUFBYSxFQUFDLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFL0MsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDeEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsWUFBWSxFQUFFO0lBQ2YsSUFBTyxTQUFTLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ3pFLElBQU8sVUFBVSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0NBQXNDLEVBQUU7SUFDekMsSUFBTyxlQUFlLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZGLElBQU8sZUFBZSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsOENBQThDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRyxpRUFBaUU7SUFDakUsd0VBQXdFO0lBRTVFLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDbEQsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcclxuaW1wb3J0ICogYXMgbWFpbiBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCAqIGFzIGxpYiBmcm9tIFwiLi9saWJcIjtcclxuY29uc3QgIGNhbGxNYWluID0gbWFpbi5jYWxsTWFpbkZyb21KZXN0O1xyXG5cclxuaWYgKHBhdGguYmFzZW5hbWUocHJvY2Vzcy5jd2QoKSkgIT09ICdzcmMnKSB7XHJcbiAgICAvLyBCZWNhdXNlIHRoZSBzZWNvbmQgZXhlY3V0ZSBvZiBKZXN0IHdhdGNoIG1vZGUgaXMgaW5oZXJpdGVkIHRoZSBjdXJyZW50IGZvbGRlci5cclxuICAgIHByb2Nlc3MuY2hkaXIoJ3NyYycpO1xyXG59XHJcblxyXG4vLyB0ZXN0XHJcbnRlc3QoJ0ZpcnN0JywgKCkgPT4ge1xyXG4gICAgY2FsbE1haW4oKTtcclxufSk7XHJcblxyXG50ZXN0KCdDaGVjayBzdGRvdXQnLCAoKSA9PiB7XHJcbiAgICBjYWxsTWFpbihbJ0EnLCAnQiddLCB7J2NvbW1hbmQnOiAnc3Rkb3V0J30pO1xyXG4gICAgZXhwZWN0KG1haW4uc3Rkb3V0KS50b0JlKCdBQkNcXG5ERVxcbltcIkFcIixcIkJcIl1cXG4nKTtcclxufSk7XHJcblxyXG50ZXN0KCdsb2NhbGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCAgZGVmYXVsdExvY2FsZSA9IEludGwuTnVtYmVyRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlO1xyXG5cclxuICAgIGNhbGxNYWluKFtdLCB7J2NvbW1hbmQnOiAnc2hvdy1sb2NhbGUnfSk7XHJcbiAgICBleHBlY3QobWFpbi5zdGRvdXQpLnRvQmUoZGVmYXVsdExvY2FsZSArICdcXG4nKTtcclxuXHJcbiAgICBjYWxsTWFpbihbXSwgeydjb21tYW5kJzogJ3Nob3ctbG9jYWxlJywgJ2xvY2FsZSc6ICdmci1GUid9KTtcclxuICAgIGV4cGVjdChtYWluLnN0ZG91dCkudG9CZSgnZnItRlJcXG4nKTtcclxufSk7XHJcblxyXG50ZXN0KCdzbmFwc2hvdCAxJywgKCkgPT4ge1xyXG4gICAgY29uc3QgIGlucHV0VGV4dCA9IGxpYi5nZXRTbmFwc2hvdChgc25hcHNob3QgMTogMSBzb3VyY2VGaWxlQ29udGVudHMgMWApO1xyXG4gICAgY29uc3QgIG91dHB1dFRleHQgPSBpbnB1dFRleHQucmVwbGFjZSgnaW5wdXQnLCAnb3V0cHV0Jyk7XHJcbiAgICBleHBlY3Qob3V0cHV0VGV4dCkudG9NYXRjaFNuYXBzaG90KCdhbnN3ZXInKTtcclxufSk7XHJcblxyXG50ZXN0KFwiY2hlY2tzIHNuYXBzaG90cyBmaWxlcyBhcmUgY29uZmlybWVkXCIsICgpID0+IHtcclxuICAgIGNvbnN0ICBhY3RpdmVTbmFwc2hvdHMgPSBmcy5yZWFkRmlsZVN5bmMoJ19fc25hcHNob3RzX18vbWFpbi50ZXN0LnRzLnNuYXAnKS50b1N0cmluZygpO1xyXG4gICAgY29uc3QgIGJhY2tVcFNuYXBzaG90cyA9IGZzLnJlYWRGaWxlU3luYygnX19zbmFwc2hvdHNfXy9tYWluLnRlc3QudHMuc25hcC5jb25maXJtZWQtdHMnKS50b1N0cmluZygpO1xyXG4gICAgICAgIC8vIOaLoeW8teWtkOOBruacq+WwvuOCkiAuc25hcCDjgavjgZfjgarjgYTnkIbnlLHjga/jgIFKZXN0IOOBjOS9v+OBo+OBpuOBhOOBquOBhCAuc25hcCDjg5XjgqHjgqTjg6vjgpLoh6rli5XnmoTjgavliYrpmaTjgZfjgojjgYbjgajjgZnjgovjgYvjgonjgafjgZlcclxuICAgICAgICAvLyBfX19fLnNuYXAuY29uZmlybWVkLXRzIOODleOCoeOCpOODq+OBjOWtmOWcqOOBmeOCi+eQhueUseOBr+OAgUplc3Qg44Gu6Ieq5YuV57eo6ZuG44GM5LqI5pyf44GX44Gq44GE44OH44O844K/44KS6L+95Yqg44GZ44KL44GT44Go44GM44GC44KL44GL44KJ44Gn44GZXHJcblxyXG4gICAgZXhwZWN0KGFjdGl2ZVNuYXBzaG90cykudG9CZShiYWNrVXBTbmFwc2hvdHMpO1xyXG59KTtcclxuIl19