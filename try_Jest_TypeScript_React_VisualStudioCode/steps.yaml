Jest + TypeScript + React + Visual Studio Code の開発環境を構築します:
    参考:
        Jest - TypeScript Deep Dive 日本語版:
            https://typescript-jp.gitbook.io/deep-dive/intro-1/jest
        React × TypeScript環境にJestを導入してみて:
            https://tech.willgate.co.jp/entry/2019/12/12/130000
    設定:
        __RepositoryName__: react1_jest
        __GitCollaboratorName__: Your Name
        __GitCollaboratorMail__: you@example.com
    準備:
        Node.js をインストールします（React が使います）:
            - https://nodejs.org/ja/download/ >> Windows Installer (.msi) >> 64-bit
            - node-v14.15.0-x64.exe をダブルクリックします
            - インストール オプションはデフォルトを使用
        Git for Windows をインストールします（シェルとして使います）:
            - https://git-scm.com/ >> Downloads >> Windows
            - ダウンロードしたファイル（例：Git-2.29.2.2-64-bit.exe）を開きます
            - Next を8回押す
            - Configuring the line ending conversions: Checkout as-is, commit as-is
            - 他のインストール オプションはデフォルトを使用
            - デスクトップを右クリック >> Git Bash Here
            - git clone  "https://github.com/githubtraining/hellogitworld.git"
            - 成功したら、デスクトップにある hellogitworld フォルダーを削除します ( rm -rf hellogitworld )
        （ダウンロード（クローン）するリポジトリにコミットする可能性があるとき）Git のユーザー名を設定します:
            - git config --global user.email "you@example.com"  #template: "__GitCollaboratorMail__"
            - git config --global user.name  "Your Name"        #template: "__GitCollaboratorName__"
            - Git bash を閉じます:
        Visual Studio Code をインストールします:
            - https://code.visualstudio.com/
            - インストール オプションはデフォルトを使用
            - （推奨）Visual Studio Code をタスクバーにピン止めします:
            - （推奨）Ctrl + S キーを押したときに全てのファイルを保存するように設定します: |
                File >> Preferences >> Keyboard Shortcuts >> save all （と入力） >>
                    File: Save All （をダブルクリック） >> Ctrl + S キー >> Enter キー
            - 下記の拡張機能をインストールします :
                - Jest Runner
    React のプロジェクトを新規作成します:
        #Git bash
        - cd  "__ParentOfProject__"
        - （TypeScript を使う場合）:
            - npx create-react-app --template typescript  "react1_jest"  #template: "__RepositoryName__"
        - （JavaScript を使う場合）:
            - npx create-react-app  "react1_jest"  #template: "__RepositoryName__"
        - cd  "react1_jest"  #template: "__RepositoryName__"
        - npm start  #// 動作確認します
            #// Windows Defender によって警告されたときは、アクセス許可します
            #// ブラウザーが開いたら閉じます
        - (Ctrl + C で Web サーバーを終了します)
            #// ウィンドウをクローズすると node.exe のプロセスが残ってしまいます
    Visual Studio Code でデバッグできるようにします:
        Visual Studio Code で __Project__ フォルダーを開きます（エディターとして使うため）:
            メニュー: File >> Open Folder >> react1_jest  #template: __RepositoryName__
        必要な Node パッケージをインストールします:
            #VSCode >> Terminal >> New Terminal
            - npm install  "ts-jest" --save-dev
        __Project__/package.json に下記の jest キーを追加します: |
            "jest": {
                "transform": {
                    "^.+\\.tsx?$": "ts-jest",
                    "^.+\\.jsx?$": "babel-jest"
                }
            }
    テスト対象のコードを作成します:
        （TypeScript を使う場合）:
            __Project__/src/foo.ts: |
                export const sum = (...a: number[]) =>
                    a.reduce(
                        (acc, val) => acc + val,
                        0);
        （JavaScript を使う場合）:
            __Project__/src/foo.js: |
                export const sum = (...a) =>
                    a.reduce(
                        (acc, val) => acc + val,
                        0);
    テスト コードを作成します:
        __Project__/src/foo.test.ts (または .js) : |
            import { sum } from './foo';

            test('basic', () => {
                expect(sum()).toBe(0);
            });

            test('basic again', () => {
                expect(sum(1, 2)).toBe(3);
            });
    デバッグできることを確認します:
        Visual Studio Code で __Project__ フォルダーを開きます:
            メニュー: File >> Open Folder >> react1_jest  #template: __RepositoryName__
        __Project__/src/foo.test.ts (または .js) ファイルを開きます:
        test 関数の中にブレークポイントを張ります:
            行番号の左をクリックします:
        デバッグを開始します:
            test 関数の上に表示されている Debug をクリックします:
        ブレークできることを確認します:
    すべてのテストを実行できることを確認します:
        #VSCode Node Debug Console など
        - cd  "__Project__"
        - npm test
    Web アプリケーションのサーバーが動くことを確認します:
        #VSCode Node Debug Console など
        - cd  "__Project__"
        - npm start
    トラブルシューティング:
        - ケース:
            エラー: |
                The react-scripts package provided by Create React App requires a dependency:
                "jest": "26.6.0"
                Don't try to install it manually: your package manager does it automatically.
                However, a different version of jest was detected higher up in the tree:
                C:\Users\ts-ne\Desktop\own\node_modules\jest (version: 26.6.1)
            対策:
                React が要求している Jest のバージョンに合わせます:
                    npm install --global  "jest@26.6.0"
                    npm install  "jest@26.6.0" --save-dev
        - ケース:
            エラー: |
                We detected setupFilesAfterEnv in your package.json.
                Remove it from Jest configuration, and put the initialization code in src/setupTests.js.
                This file will be loaded automatically.
            対策:
                __Project__/package.json の json キーの中から下記のキーを削除します:
                    roots, preset, testEnvironment, setupFilesAfterEnv
                        #// エラーメッセージに削除すべきキーが一覧されます

React Router Quick Start:
    参考: https://reactrouter.com/web/guides/quick-start
    設定:
        __Project__: demo-app
    React Router のプロジェクトを用意します（既存のものでもよい）:
        - 上記「Node.js をインストールします」の手順を行います
        #Bash など
        - npx create-react-app "demo-app"  #template: "__Project__"
    プロジェクトに React Router をインストールします:
        - cd "demo-app"  #template: "__Project__"
        - npm install react-router-dom
        - npm install @types/react-router-dom  --save-dev  #// TypeScript の場合
    React コンポーネントのルートを React Router に置き換えます:
        #// 既存のルートのコンポーネントは改名してください
        src/App.js: |
            import React from "react";
            import {
                BrowserRouter as Router,
                Switch,
                Route,
                Link
            } from "react-router-dom";

            export default function App() {
                return (
                    <Router>
                        <div>
                            <nav>
                                <ul>
                                    <li>
                                        <Link to="/">Home</Link>
                                    </li>
                                    <li>
                                        <Link to="/about">About</Link>
                                    </li>
                                    <li>
                                        <Link to="/users">Users</Link>
                                    </li>
                                </ul>
                            </nav>

                            {/* A <Switch> looks through its children <Route>s and
                                    renders the first one that matches the current URL. */}
                            <Switch>
                                <Route path="/about">
                                    <About />
                                </Route>
                                <Route path="/users">
                                    <Users />
                                </Route>
                                <Route path="/">
                                    <Home />
                                </Route>
                            </Switch>
                        </div>
                    </Router>
                );
            }

            function Home() {
                return <h2>Home</h2>;
            }

            function About() {
                return <h2>About</h2>;
            }

            function Users() {
                return <h2>Users</h2>;
            }

Redux Toolkit Basic Tutorial:
    参考:
        - https://redux-toolkit.js.org/tutorials/basic-tutorial
        - https://qiita.com/pokotyan/items/a1d667ee46d0bc19108d
    設定:
        __Project__: demo-app
    React Router のプロジェクトを用意します（既存のものでもよい）:
        - 上記「Node.js をインストールします」の手順を行います
        #Bash など
        - npx create-react-app --template redux-typescript "demo-app"  #template: "__Project__"
    起動します:
        - cd "demo-app"  #template: "__Project__"
        - npm start
        #// src/features/counter/Counter.tsx が呼び出し側
        #// src/features/counter/counterSlice.ts がスライス
        #// app/store.ts がストア

