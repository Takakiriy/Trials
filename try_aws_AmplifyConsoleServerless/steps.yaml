React のウェブアプリケーションの Amplify Console CI/CD 環境を構築します:
    #// AWS Amplify、Amazon Cognito、GitHub を使用
    設定: #settings:
        __AWS_AccountID__: 123456789012  #★秘密:仮
        __AWS_UserName__: user1
        __RegionName__: 東京  #// CodePipeline のパイプラインを作成するリージョンの名前
        __RegionID__: ap-northeast-1  #// __RegionName__ の ID
        __AWS_AdministratorGroup__: AdministratorGroup
        __AmplifyUser__: own-amplify  #// Amplify 用 IAM ユーザー、Amplify CLI で必要な権限を持つ
        __AmplifyRole__: own-amplifyconsole-backend-role
        __AmplifyUserAccessKeyID__: AKIAZQ0A0A0A0A0A0A0A  #★秘密:仮  #// 手順内でメモする値
        __AmplifySecretAccessKey__: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #★秘密:仮  #// 手順内でメモする値
        __CLI_Profile__: own-amplify  #// aws 関連の CLI のプロファイル名
        __GitHubOwnerAccount__: Takakiriy  #// リポジトリのオーナーのアカウント名
        __GitHubCollaboratorAccount__: Takakiriy  #// リポジトリにアクセスするユーザーのアカウント名
        __GitCollaboratorName__: Your Name        #// git log コマンドで表示されるユーザー名
        __GitCollaboratorMail__: you@example.com  #// git log コマンドで表示されるメールアドレス
        __RepositoryName__: own  #// アプリケーション名
        __ProductBranchName__: master  #// 本番用のブランチ名
        __BackupName__: own_back_up
        __AppUserName__: example1
        __AppUserMail__: example@example.com  #★秘密:仮
        __AppUserPassword__: 12345a_A
        __FirstFunctionName__: createExample
        __Template__: /c/template/  #★秘密:仮
        __UserProfile__: C:\Users\ts-ne
        __StagingPassword__: 12345aA19FEpQninoAFE83e  #★秘密:仮
    準備:
        参考:
            - AMPLIFY SNS WORKSHOP
                https://amplify-sns.workshop.aws/ja/
            - 継続的デプロイを使用した静的ウェブホスティング
                https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-1/
            - AWS Amplify と Vue.js を使って、基本的な認証と CRUD 操作ができる Web アプリケーションを作る
                https://aws.amazon.com/jp/builders-flash/202008/amplify-crud-app/
        ローカルPCへ各種ソフトウェアをインストールします:
            Node.js をインストールします:
                - https://nodejs.org/ja/download/ >> Windows Installer (.msi) >> 64-bit
                - node-v12.19.0-x64.exe をダブルクリックします
                - インストール オプションはデフォルトを使用
            Git for Windows をインストールします:
                - https://git-scm.com/ >> Downloads >> Windows
                - ダウンロードしたファイル（例：Git-2.24.1.2-64-bit.exe）を開きます
                - Next を8回押す
                - Configuring the line ending conversions: Checkout as-is, commit as-is
                - 他のインストール オプションはデフォルトを使用
                - デスクトップを右クリック >> Git Bash Here
                - git clone  "https://github.com/githubtraining/hellogitworld.git"
                - 成功したら、デスクトップにある hellogitworld フォルダーを削除します ( rm -rf hellogitworld )
                - Git の更新ログ(git log)に記録されるユーザー名を設定します:
                    - git config --global user.email "you@example.com"  #template: "__GitCollaboratorMail__"
                    - git config --global user.name  "Your Name"        #template: "__GitCollaboratorName__"
                - Git bash を閉じます:
            Visual Studio Code をインストールします:
                - https://code.visualstudio.com/
                - インストール オプションはデフォルトを使用
                - （推奨）Visual Studio Code をタスクバーにピン止めします:
                - （推奨）Ctrl + S キーを押したときに全てのファイルを保存するように設定します: |
                    File >> Preferences >> Keyboard Shortcuts >> save all （と入力） >>
                        File: Save All （をダブルクリック） >> Ctrl + S キー >> Enter キー
                - 下記の拡張機能をインストールします:
                    - Jest Runner
        （GitHub リポジトリの所有者になる場合）Git リポジトリを作成します:
            参考: AMPLIFY SNS WORKSHOP >> GITHUBと連携してCI/CD環境を構築する(1)
                https://amplify-sns.workshop.aws/ja/70_multi_env/10_amplify_console/connect_github.html
            GitHub のアカウントを作成します:
            GitHub にサインインします:
                メニュー: https://github.com/ >> 三（右上） >> Sign in
                Sign in ページ:
                    Username or email address: Takakiriy  #template: __GitHubOwnerAccount__
                    Password: ____
                    Sign in ボタン:
                ブラウザーを閉じます:
            GitHub にリポジトリを新規作成します:
                リポジトリを作成します:
                    メニュー: https://github.com/ >>（Repositories）New （左上）
                    Repository name: own  #template: __RepositoryName__
                    Public or Private: Private
                    Create repository ボタン:
                    ブラウザーを閉じます:
        （GitHub リポジトリのコラボレーターになる場合）GitHub にサインインします:
            #// 招待の仕方は、GitHub/steps.yaml の「コラボレーターを個人リポジトリに招待します」を参照
            メニュー: https://github.com/ >> 三（右上） >> Sign in
            Sign in ページ:
                Username or email address: Takakiriy  #template: __GitHubCollaboratorAccount__
                Password: ____
                Sign in ボタン:
            ブラウザーを閉じます:
        プライベート リポジトリに接続してダウンロード（クローン）します:
            #Git bash:
            - cd  "__ParentOfProject__"
            - git clone "https://github.com/Takakiriy/own.git"  #template: https://github.com/__GitHubOwnerAccount__/__RepositoryName__.git
                #// ここでエラーになるときは Git をアンインストール＆インストールしてください
            - Sign in with your browser ボタン  #// プライベート リポジトリのときだけこのボタンが表示されます
            - 表示されたアカウント名を確認: wants to access your Takakiriy account
                #template: wants to access your __GitHubCollaboratorAccount__ account
            - Authorize GitCredentialManager ボタン
            - 成功したらブラウザーを閉じます:
    React のプロジェクトを新規作成します:
        #Git bash
        - cd  "__ParentOfProject__"
        - npx create-react-app --template typescript  "own"  #template: "__RepositoryName__"
        - cd  "own"  #template: "__RepositoryName__"
        - npm start  #// 動作確認します
            #// Windows Defender によって警告されたときは、アクセス許可します
            #// ブラウザーが開いたら閉じます
        - (Ctrl + C で Web サーバーを終了します)
            #// ウィンドウをクローズすると node.exe のプロセスが残ってしまいます
        - コミットします:
            - git add "."
            - git commit -a -m "Create new React application"
            - git push
        - Git bash を閉じます
    Jest を使ったテストを Visual Studio Code でデバッグできるようにします:
        参考:
            Jest + TypeScript + React + Visual Studio Code の開発環境を構築します:
                https://github.com/Takakiriy/Trials/blob/master/try_Jest_TypeScript_React_VisualStudioCode/steps.yaml
        Visual Studio Code でデバッグできるようにします:
            Visual Studio Code で __Project__ フォルダーを開きます（エディターとして使うため）:
                メニュー: File >> Open Folder >> own  #template: __RepositoryName__
            必要な Node パッケージをインストールします:
                #VSCode >> Terminal >> New Terminal
                - npm install  "ts-jest" --save-dev
            __Project__/package.json に下記の jest キーを追加します: |
                "jest": {
                    "transform": {
                        "^.+\\.tsx?$": "ts-jest",
                        "^.+\\.jsx?$": "babel-jest"
                    }
                }
        テスト対象のコードを作成します:
            __Project__/src/foo.ts: |
                export const sum = (...a: number[]) =>
                    a.reduce(
                        (acc, val) => acc + val,
                        0);
        テスト コードを作成します:
            __Project__/src/foo.test.ts: |
                import { sum } from './foo';

                test('basic', () => {
                    expect(sum()).toBe(0);
                });

                test('basic again', () => {
                    expect(sum(1, 2)).toBe(3);
                });
        デバッグできることを確認します:
            Visual Studio Code で __Project__ フォルダーを開きます:
                メニュー: File >> Open Folder >> own  #template: __RepositoryName__
            __Project__/src/foo.test.ts (または .js) ファイルを開きます:
            test 関数の中にブレークポイントを張ります:
                行番号の左をクリックします:
            デバッグを開始します:
                test 関数の上に表示されている Debug をクリックします:
            #// セキュリティの警告がされますが許可します
            ブレークできることを確認します:
        すべてのテストを実行できることを確認します:
            #VSCode Node Debug Console など
            - cd  "__Project__"
            - npm test
        Web アプリケーションのサーバーが動くことを確認します:
            #VSCode Node Debug Console など
            - cd  "__Project__"
            - npm start
            - Ctrl + C キーで npm start を終了します:
        コミットします:
            - git add "."
            - git commit -a -m "Supported Visual Studio Code debuger"
            - git push
        トラブルシューティング:
            - ケース:
                エラー: |
                    The react-scripts package provided by Create React App requires a dependency:
                    "jest": "26.6.0"
                    Don't try to install it manually: your package manager does it automatically.
                    However, a different version of jest was detected higher up in the tree:
                    C:\Users\ts-ne\Desktop\own\node_modules\jest (version: 26.6.1)
                対策:
                    React が要求している Jest のバージョンに合わせます:
                        npm install --global  "jest@26.6.0"
                        npm install  "jest@26.6.0" --save-dev
            - ケース:
                エラー: |
                    We detected setupFilesAfterEnv in your package.json.
                    Remove it from Jest configuration, and put the initialization code in src/setupTests.js.
                    This file will be loaded automatically.
                対策:
                    __Project__/package.json の json キーの中から下記のキーを削除します:
                        roots, preset, testEnvironment, setupFilesAfterEnv
                            #// エラーメッセージに削除すべきキーが一覧されます
    React のプロジェクトに Amplify を追加します:
        aws のアカウントを作成します:
        aws にサインインしてリージョンを選択します:
            AWS マネジメント コンソールにサインインします:
                URL: https://console.aws.amazon.com/
                （ユーザー）: IAM ユーザー
                アカウントID: 123456789012  #template: __AWS_AccountID__
                次へ ボタン:
                ユーザー名: user1  #template: __AWS_UserName__
                パスワード: __AWS_UserPassword__
                サインイン ボタン:
            リージョン: 東京 （右上） #template: __RegionName__
            ブラウザーを閉じます:
        Amplify CLI をインストールしてセットアップします:
            参考:
                - Install the Amplify CLI
                    https://docs.amplify.aws/cli/start/install#option-1-watch-the-video-guide
                - AMPLIFY SNS WORKSHOP >> INSTALL & CONFIGS
                    https://amplify-sns.workshop.aws/ja/00_prerequisites/20_install_and_configs.html
            Amplify CLI をインストールします:
                #Git bash
                #//任意のフォルダーで
                - npm install -g @aws-amplify/cli
                - amplify -v  #// 4.32.0
            Amplify CLI をセットアップします:
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - amplify configure
                ブラウザーが開いたら、すでにサインインできていることを確認し、ブラウザーを閉じます:
                amplify configure の続きを表示します（Enter キーを押します）:
                region: ap-northeast-1  #template: __RegionID__
                user name: own-amplify  #template: __AmplifyUser__
                (ブラウザーが開きます):
                    メニュー: ユーザー >> ユーザーを追加
                    ユーザー名: own-amplify  #template: __AmplifyUser__
                    アクセスの種類:
                        チェックします:
                            プログラムによるアクセス
                        チェックしません:
                            AWS マネジメントコンソールへのアクセス:
                        次のステップ ボタン:
                    ユーザーをグループに追加:
                        選択するグループ（にチェックを入れます）:
                            - AdministratorGroup  #template: __AWS_AdministratorGroup__
                        次のステップ ボタン:
                    タグの追加:
                        次のステップ ボタン:
                    確認:
                        ユーザーの作成 ボタン:
                    アクセスキーをメモします:
                        アクセスキー ID: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                        シークレットアクセスキー: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
                        閉じる ボタン（右下）:
                    ブラウザーを閉じます:
                amplify configure の続きを表示します（Enter キーを押します）(2):
                accessKeyId: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                secretAccessKey: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
                Profile Name: own-amplify  #template: __CLI_Profile__
        React のプロジェクトに Amplify を追加します:
            参考: AMPLIFY SNS WORKSHOP >> BOOTSTRAP
                https://amplify-sns.workshop.aws/ja/30_mock/00_bootstrap.html
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "own"  #template: "__RepositoryName__"
                - amplify init
            Enter a name for the project: own  #// そのまま Enter  #template: __RepositoryName__
            Enter a name for the environment: production
            Choose your default editor: Visual Studio Code  #// そのまま Enter
            Choose the type of app that you're building: javascript  #// そのまま Enter. TypeScript の場合でも
            What javascript framework are you using: react  #// そのまま Enter
            Source Directory Path: src  #// そのまま Enter
            Distribution Directory Path: build  #// そのまま Enter
            Build Command: npm.cmd run-script build  #// そのまま Enter
            Start Command: npm.cmd run-script start  #// そのまま Enter
            Do you want to use an AWS profile?: Y (Yes)  #// そのまま Enter
            Please choose the profile you want to use: own-amplify  #// そのまま Enter  #template: __CLI_Profile__
    認証機能（Amplify auth）(authentication) のカテゴリーを追加します:
        参考: AMPLIFY SNS WORKSHOP >> 認証機能
            https://amplify-sns.workshop.aws/ja/30_mock/10_auth.html
        Amplify auth のカテゴリーを追加します（amplify add auth コマンド）:
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "own"  #template: "__RepositoryName__"
                - amplify add auth
            Do you want to use the default authentication and security configuration?: Default configuration  #// そのまま Enter
            How do you want users to be able to sign in?: Username  #// そのまま Enter
            Do you want to configure advanced settings?: No, I am done.  #// そのまま Enter
            コマンド:
                - amplify status  #// Auth カテゴリーが追加されていることを確認します
                - amplify push  #// バックエンドをクラウドに反映させます
        フロントエンドを作成します:
            必要な Node パッケージをインストールします:
                - npm install --save  "aws-amplify"  "aws-amplify-react"
            __Project__/src/App.tsx ファイルを置き換えます:
                bash: |
                    #// cd  "__Project__"
                    export  res_="/c/template/"  #template: "__Template__"
                    cp "${res_}auth/App.tsx" "src/App.tsx"
                    unset  res_
            参考:
                - AMPLIFY SNS WORKSHOP >> 認証機能
                    https://amplify-sns.workshop.aws/ja/30_mock/10_auth.html
                - Customizing the authentication experience of Amplify’s withAuthenticator.
                    https://medium.com/@coryschimmoeller/customizing-the-authentication-experience-of-amplifys-withauthenticator-e6f2089ff469
        動作確認をします:
            起動コマンド:
                #新しい bash など
                - cd "__Project__"
                - npm start
            (ブラウザーが開きます):
                「アカウントを作る」をクリック:
                サインアップ画面:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345a_A  #template: __AppUserPassword__
                    メールアドレス: example@example.com  #template: __AppUserMail__
                    アカウントを作る ボタン:
                    確認コード: ____
                    確定 ボタンをクリック:
                または、サインイン画面:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345a_A  #template: __AppUserPassword__
                    サインイン ボタンをクリック:
                Hello World! と表示されることを確認します:
                ブラウザーを閉じます:
            Ctrl + C キーで npm start を終了します:
        ユーザーが登録されていることを確認します:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                own00005678_userpool_00005678-production >> ユーザーとグループ（左上）
                    #template: __RepositoryName__00005678_
                    #// 00005678 は毎回変わります
            ユーザー名: example1  #template: __AppUserName__
    GitHub リポジトリへコミットします:
        #VSCode Terminal (bash や PowerShell など)
        - cd "__Project__"
        - git status  #// 変更されたファイルが表示されます
        - git add "."
        - git commit -a -m "Added auth (Cognito authentication)"
        - git push
    プロジェクト フォルダーのバックアップをとります（コミットされないファイルがある可能性があるため、念のため）:
        #Git bash
        - cd "__Project__"
        - rm -rf  "node_modules"
        - tar cvzf  "../own_back_up.tar.gz"  "."  #// tar.gz に圧縮します  #template: ../__BackupName__.tar.gz
        - npm ci  #// node_modules を復活します
    結合テスト環境（cypress）をインストールします:
        参考:
            - aws >> Running end-to-end Cypress tests for your fullstack CI/CD deployment with Amplify Console
                https://aws.amazon.com/jp/blogs/mobile/run-end-to-end-cypress-tests-for-your-fullstack-ci-cd-deployment-with-amplify-console/
                https://docs.aws.amazon.com/ja_jp/amplify/latest/userguide/running-tests.html
            - cypress >> Installing Cypress
                https://docs.cypress.io/guides/getting-started/installing-cypress.html#Continuous-integration
        cypress をインストールします:
            #Git bash
            - npm install cypress --save-dev
        cypress の動作確認をします:
            - ./node_modules/.bin/cypress open
            - OK, got it! ボタンを押します:
            - テストのファイル名をクリックするとテストが動きます:
        cypress が Visual Studio Code と連携するように設定します:
            参考: https://docs.cypress.io/guides/tooling/IDE-integration.html#File-Opener-Preference
            メニュー: cypress ウィンドウ >> Settings（上）>> File Opener Preference
            Other: C:\Users\ts-ne\AppData\Local\Programs\Microsoft VS Code\Code.exe
                #template: __UserProfile__\AppData
            メニュー(2): Tests（左上） >> ～.js を右クリック >> Open IDE（右）
        テストコードを新規作成します:
            __Project__/cypress/integration/authenticator_spec.js を作成します:
                bash: |
                    #// cd "__Project__"
                    export  res_="/c/template/"  #template: "__Template__"
                    cp "${res_}cypress/authenticator_spec.js" "cypress/integration/authenticator_spec.js"
                    unset  res_
                登録済みのユーザーのアカウントに変更します:
                    before: |
                        cy.get(selectors.usernameInput).type("example1");
                        cy.get(selectors.signInPasswordInput).type("12345a_A");
                    after: |
                        cy.get(selectors.usernameInput).type("example1");  //#template:  "__AppUserName__"
                        cy.get(selectors.signInPasswordInput).type("12345a_A");  //#template: "__AppUserPassword__"
            __Project__/cypress.json の baseURL フィールドを設定します: |
                {
                    "baseUrl": "http://localhost:3000"
                }
            #   // 後でデプロイした URL が決まったら baseURL の設定を変更してください
        ローカル Web サーバーでテストします:
            Web サーバーを起動します:
                #新しい bash など
                - cd "__Project__"
                - npm start
                - ページが表示されることを確認したら、ブラウザーを閉じます:
            cypress を起動します:
                #新しい bash など
                - cd "__Project__"
                - ./node_modules/.bin/cypress open
            cypress のウィンドウに表示された新規作成したテストをクリックします:
                - authenticator_spec.js
                - サインインできることを確認します:
            （CI/CDを組むので不要）すべてのテストを実行します:
                - cypress の Run all specs（右上）を押します
                #// Amplify Console のテストのフェースで実行されます
            テストの examples フォルダーを削除します:
                #新しい bash など
                - cd "__Project__"
                - rm -rf  cypress/integration/examples
                #// 環境を変えていくと失敗する可能性があるため
            テストの終了:
                ブラウザー、cypress のウィンドウを閉じます:
                npm start を実行したシェルで Ctrl + C を押します:
        コミットしてリポジトリにプッシュします（Amplify Console が自動検出するため）:
            #bash など
            - cd "__Project__"
            - git add "."
            - git commit -a -m "Added cypress"
            - git push
    S3 (Amplify storage) のカテゴリーを追加します:
        起動コマンド:
            #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
            - cd  "__Project__"
            - amplify add storage
        Please select from one of the below mentioned services: Content
        Please provide a friendly name for your resource ...: s3
        Please provide bucket name: own-amplify-storage  #template: __RepositoryName__-amplify-storage
        Who should have access: Auth users only
        What kind of access do you want for Authenticated users?: [create/update, read, delete]
        Do you want to add a Lambda Trigger for your S3 Bucket?: y
        Select from the following options: Create a new function
        Do you want to edit the local S3Trigger9e312aaf lambda function now?: y
            #// __Project__/amplify/backend/function/S3Trigger00000000/src/index.js が開きます
            #// 00000000 は Lambda を作るたびに異なる値です
            #// Visual Studio Code (テキスト エディター) を閉じます
        Press enter to continue:
        コマンド:
            #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
            - cd  "__Project__"
            - amplify status  #// Storage の Operation が Create になっているので push が必要だと分かります
            - amplify push
        S3 の Lambda Trigger の動作確認をします:
            - https://console.aws.amazon.com/s3/ >> （作成日でソート） >>
            - own-amplify-storage000000-production  #template: __RepositoryName__-amplify-storage000000-production
                    #// 000000 は storage を作るたびに異なる値です
            - 任意のファイルをアップロードします
            - https://console.aws.amazon.com/lambda/ >> （最終更新日時でソート） >>
            - S3Trigger00000000-production  #// 00000000 は Lambda を作るたびに異なる値です
            - モニタリング（タブ）>> CloudWatch のログを表示（上）
        コミットしてリポジトリにプッシュします:
            #bash など
            - git add "."
            - git commit -a -m "Added S3 storage"
            - git push
        トラブルシューティング:
            - ケース:
                警告されたメッセージ:
                    If a user is part of a user pool group,
                    run "amplify update storage" to enable IAM group policies for CRUD operations
                （メモ）以下を行うと Lambda がもう１つ作られてしまうため非推奨:
                    S3 にアクセスできる IAM グループを作成します:
                        #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                        - amplify update storage
                    Please select from one of the below mentioned services: Content
                    Who should have access: Auth users only
            - ケース:
                警告されたメッセージ: |
                    Amazon S3 storage was already added to your project.
                    undefined is present in amplify-meta.json
                    An error occurred when adding the storage resource
                対策:
                    #bash
                    - amplify remove storage
    バックエンドの計算機能 (GraphQL, Lambda) の各種カテゴリーを追加します:
        Amplify API (GraphQL) のカテゴリーを追加します:
            #// これは下記「Amplify API (GraphQL) のカテゴリーを追加します」のコピーです
            参考: AMPLIFY SNS WORKSHOP >> POST機能 BACK-END(1)
                https://amplify-sns.workshop.aws/ja/30_mock/20_post_back_end.html
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "__Project__"
                - amplify add api
            Please select from one of the below mentioned services: GraphQL
            Provide API name: own  #template: __RepositoryName__
            Choose the default authorization type for the API: Amazon Cognito User Pool
            Do you want to configure advanced settings for the GraphQL API: No, I am done.
            Do you have an annotated GraphQL schema?: No
            Choose a schema template: Single object with fields
            Do you want to edit the schema now?: y
            #// 最後の質問を y と答えると、下記のファイルがテキスト エディターで開きます
        amplify/backend/api/own/schema.graphql を下記の内容に置き換えます : #// 下記「schema.graphql を下記の内容に置き換え」のコピー
                #template: api/__RepositoryName__/schema
            bash: |
                export  res_="/c/template/"  #template: "__Template__"
                cp "${res_}GraphQL/schema.graphql" "amplify/backend/api/own/schema.graphql"  #template: __RepositoryName__
                unset  res_
            ＠function の内容を下記に置き換えます: |
                @function(name: "own-createExample-${env}")  #template: __RepositoryName__-__FirstFunctionName__-
        AppSync (GraphQL) をデプロイします:
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "__Project__"
                - amplify push
            Do you want to generate code for your newly created GraphQL API: y  #// そのまま Enter
            Choose the code generation language target: typescript
            Enter the file name pattern of graphql queries, ...: src\graphql\**\*.ts  #// そのまま Enter
            Do you want to generate/update all possible GraphQL operations ...: y  #// そのまま Enter
            Enter maximum statement depth: 2  #// そのまま Enter
            Enter the file name for the generated code: src\API.ts  #// そのまま Enter
            AppSync のデプロイ状況を確認します:
                - https://ap-northeast-1.console.aws.amazon.com/appsync/home >>
                - own-production  #template: __RepositoryName__-production
                - データソース（左）>> createExample (で検索) >>  #template: __FirstFunctionName__
                #// まだ Lambda リソースは作られていませんが ARN は表示されます
        Lambda 関数を追加します:  #// 下記「Lambda 関数を追加します」のコピー
            参考: AMPLIFY SNS WORKSHOP >> TIMELINE機能 ＠FUNCTION
                https://amplify-sns.workshop.aws/50_follow_timeline/30_function_directive.html
            関数カテゴリーを追加します:
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - cd  "__Project__"
                    - amplify add function
                Select which capability you want to add: Lambda function
                Provide a friendly name for your resource to be used as ...: createExample  #template: __FirstFunctionName__
                Provide the AWS Lambda function name: own-createExample
                    #template: __RepositoryName__-__FirstFunctionName__
                Choose the runtime that you want to use: NodeJS
                Choose the function template that you want to use: Hello World
                Do you want to access other resources created in this project ...?: Yes
                Select the category: [api]
                Select the operations you want to permit ...: (すべて選択)  #// Lambda 関数によって権限を調整してください
                Do you want to invoke this function on a recurring schedule?: n
                Do you want to configure Lambda layers for this function?: n
                Do you want to edit the local lambda function now?: y
                Press enter to continue:
                #// 以上で、amplify\backend\function\createExample が作られます  #template: __FirstFunctionName__
                #// 最後のオプションで amplify/backend/function/createExample/src/index.js がエディターが開きます  #template: __FirstFunctionName__
            開いたファイルの exports.handler の定義を下記の内容に置き換えます: |
                exports.handler = async (event) => {
                    console.log('Lambda handler called.');
                    console.log(event);

                    return 'returnValue';
                };
        Lambda 関数をデプロイします:
            コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "__Project__"
                - amplify push
            AppSync と Lambda のデプロイ状況を確認します:
                - https://ap-northeast-1.console.aws.amazon.com/appsync/home >> own-production  #template: __RepositoryName__-
                -   データソース（左）>> createExample （を検索） >> (リソース) >>  #template: __FirstFunctionName__
                -   モニタリング（タブ）>> CloudWatch のログを表示（上）
                - https://ap-northeast-1.console.aws.amazon.com/lambda/home >>
                    amplify-own- >> モニタリング（タブ）>> CloudWatch のログを表示（上） #template: amplify-__RepositoryName__-
        src/App.js などを置き換えます:
            bash: |
                #// cd "__Project__"
                export  res_="/c/template/"  #template: "__Template__"
                cp "${res_}GraphQL/App.tsx"        "src/App.tsx"
                cp "${res_}GraphQL/App.test.tsx"   "src/App.test.tsx"
                cp "${res_}GraphQL/App1.tsx"       "src/App1.tsx"
                cp "${res_}GraphQL/App1.test.tsx"  "src/App1.test.tsx"
                unset  res_
            #// 参考: API.graphql https://qiita.com/keito1024/items/851e5cb17895f867d216
        （メモ）もし、Jest を使うときは src/App.js を一時的に認証をオフにします:
            #// ローカルで Jest を使ったテストが完了したら、認証をオンに戻してください
            #// Jest (npm test) は、デフォルトの Amplify Console では実行されません（テストされません）
            bash: |
                #// cd "__Project__"
                sed -e 's/true;  \/\/export default App/false;  export default App/'  "src/App.tsx" > "src/App.tsx.updating"
                sed -e "s/export default withAuthenticator/withAuthenticator/"  "src/App.tsx.updating" > "src/App.tsx"
                rm  "src/App__.tsx"
                unset  res_
        ローカルのフロントエンドを実行してクラウドにあるバックエンドを動かします:
            シェルでの操作:
                #新しい Git bash
                - cd "__Project__"
                - npm start
            (ブラウザーが開きます):
                （もしサインイン画面が表示されたら）:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345a_A  #template: __AppUserPassword__
                    サインイン ボタンをクリック:
                Hello, example1 ! と表示されることを確認します:  #template: Hello, __AppUserName__ !
                F12 キーを押して、コンソール タブを開きます:
                Call ボタンを押して、バックエンドを動かします:
                コンソールに {data {...}} が表示されることを確認します:
            バックエンドのログを確認します:
                - https://console.aws.amazon.com/lambda/ >> createExample  #template: __FirstFunctionName__
                - モニタリング（タブ）>> CloudWatch のログを表示（上）
                - Lambda handler called. などのログが記録されていることを確認します:
            ブラウザーを閉じます:
            bash のウィンドウで Ctrl + C キーを押して npm start を終了します:
        （もし使わなくなったら）Lambda 関数を削除します:
            - __Project__ フォルダーのバックアップを取ります
            - amplify add function コマンドでダミーの Lambda 関数を追加します
            - __Project__ フォルダーの変化を参考に使わなくなった Lambda に関するファイルを削除・編集します
            - https://ap-northeast-1.console.aws.amazon.com/lambda/home >>
                amplify-own- (で検索) >> 使わなくなった Lambda を削除します  #template: amplify-__RepositoryName__-
            - https://ap-northeast-1.console.aws.amazon.com/cloudwatch/ >> ロググループ
                /aws/lambda/amplify-own-RequestUnicorn >> アクション >> ロググループの削除
        コミットしてリポジトリにプッシュします:
            #bash など
            - git add "."
            - git commit -a -m "Added AppSync(api) and Lambda(function)"
            - git push
    Amplify Console に CI/CD環境を構築します（hosting カテゴリーの追加）:
        #// 注意 cypress を使うときは先に cypress をインストールしないと自動検出による自動設定が行われません
        #// hosting を入れなおすことで自動設定が行われるかもしれません（★未確認）
        （リポジトリの所有者に hosting カテゴリーの追加だけお願いするとき):
            - 所有者は、下記「Amplify CLI を使うプロジェクトに新しい人が参加するとき」を参照、
                「hosting カテゴリーの追加」まで行います
            - hosting カテゴリーの追加の作業が終わったら、コラボレーターは git pull と amplify pull してください
        #// 以下はリポジトリの所有者が自分のとき
        参考: AMPLIFY SNS WORKSHOP >> 手動デプロイ
            https://amplify-sns.workshop.aws/ja/40_hosting/00_manual_deployment.html
        Amplify hosting のカテゴリーを追加します:
            コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd "__Project__"
                - amplify add hosting
            Select the plugin module to execute: Hosting with Amplify Console (...)
            Choose a type Manual deployment: Continuous deployment
            (ブラウザーが開きます):
                Connect a frontend web app: GitHub
                Continue ボタン:
                    (aws と GitHub の接続がされていなかったとき):
                        表示されたアカウント名を確認: wants to access your Takakiriy account
                            #template: wants to access your __GitHubCollaboratorAccount__ account
                        Authorize GitCredentialManager ボタン:
                リポジトリブランチの追加:
                    リポジトリ: Takakiriy/own  #template: __GitHubOwnerAccount__/__RepositoryName__
                    ブランチ: master  #template: __ProductBranchName__
                    次へ ボタン:
                ビルド設定の構成:
                    チェック: Deploy updates to backend resources with your frontend on every code commit
                    Select a backend evironment: production
                    Create new role ボタン:
                        ユースケースの選択:
                            次のステップ ボタン:
                        Attached アクセス権限ポリシー:
                            次のステップ ボタン:
                        タグの追加 (オプション):
                            次のステップ ボタン:
                        確認:
                            ロール名: own-amplifyconsole-backend-role  #template: __AmplifyRole__
                            ロールの作成 ボタン:
                        IAM が表示されているブラウザーのタブを閉じます:
                    Select an existing service role ...: own-amplifyconsole-backend-role  #template: __AmplifyRole__
                        #// ロール名を入力する右にある右回りボタンを押すと選べるようになります
                    次へ ボタン:
                確認:
                    保存してデプロイ ボタン:
                #// プロビジョン >> ビルド >> デプロイ >> 検証 が完了するまで待ちます（約7分）
                #// 初回のテストはスキップされます
                #// https://..（左下）をクリックすると実行します
                #// 登録済みのユーザーの一覧を見るには、 
                #//     https://ap-northeast-1.console.aws.amazon.com/cognito/home >>
                #//     ユーザープールの管理 >> own... >> ユーザーとグループ  #template: __RepositoryName__
                #// master（右半分の左上）をクリックするとデプロイのログが表示されます
                #// Amplify Console URL: https://console.aws.amazon.com/amplify/
            Continuous deployment is configured in the Amplify Console...:  #// Enter キーを押します
            (下記のように表示されます。Domaiin 列はバックエンドのURLです): |
                ┌──────────────┬──────────────────────────────────────────────┐
                │ FrontEnd Env │ Domain                                       │
                ├──────────────┼──────────────────────────────────────────────┤
                │ master       │ https://master.d2oudfgbjw0ivu.amplifyapp.com │
                └──────────────┴──────────────────────────────────────────────┘
            コミットすると CI/CD パイプラインが動くことを確認します:
                - たとえば __Project__/public/index.html の <titie> を変更します
                - git add "."
                - git commit -a -m "added Amplify hosting"
                - git push
    staging 環境（＝develop ブランチ）を構築します:
        参考:
            - AMPLIFY SNS WORKSHOP >> GITHUBと連携してCI/CD環境を構築する(2)
                https://amplify-sns.workshop.aws/ja/70_multi_env/10_amplify_console/create_cicd.html
            - AMPLIFY SNS WORKSHOP >> 複雑な開発環境の構築(1)
                https://amplify-sns.workshop.aws/70_multi_env/20_branch_autodetection.html
        リポジトリと同期します:
            #Git bash
            - git status  #// clean 状態であること
            - git branch  #// 分岐元が正しいこと（例：master ブランチ）
            - git pull    #// リポジトリと同期します
        クラウドと同期します:
            #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
            - cd  "__Project__"
            - amplify pull
        Amplify Console に staging 環境を新規作成します:
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "__Project__"
                - amplify env add  #// staging 環境が無いときは作ります
            Do you want to use an existing environment?: No
            Enter a name for the environment: staging
            Do you want to use an AWS profile?: Yes
            Please choose the profile you want to use: own-amplify  #template: __CLI_Profile__
        リポジトリに develop ブランチを新規作成します:
            #Git bash
            - cd  "__Project__"
            - git status  #// clean 状態であること
            - git branch  #// 分岐元が正しいこと（例：master ブランチ）
            - git pull    #// リポジトリと同期します
            - git checkout -b "develop"  #// ローカルに develop ブランチを新規作成します
            - git push --set-upstream origin "develop"  #// リポジトリに develop ブランチを作成します
        staging 環境のクラウドにプッシュします:
            #Git bash
            - cd  "__Project__"
            - amplify env checkout staging  #// 環境を切り替えます
            - amplify push
        テスト用アカウントを staging 環境の Cognito に作成します:
            #// Cognito リソースは production 環境のリソースとは別に存在します
            #// この手順においては、CI/CD パイプラインの中のテスト フェーズが通るために必要です
            起動コマンド:
                #新しい Git bash
                - cd "__Project__"
                - npm start
            (ブラウザーが開きます):
                「アカウントを作る」をクリック:
                サインアップ画面:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345a_A  #template: __AppUserPassword__
                    メールアドレス: example@example.com  #template: __AppUserMail__
                    アカウントを作る ボタン:
                    確認コード: ____
                    確定 ボタンをクリック:
                サインインできたことを確認します:
                ブラウザーを閉じます:
        CI/CD 環境で、stating 環境と develop ブランチを紐付けます:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
                own >> Frontend environments (タブ) >> ブランチの接続（右上）  #template: __RepositoryName__
            ブランチ: develop
            Backend environment: staging
            次へ ボタン:
            保存してデプロイ ボタン:
            #// デプロイが完了するまで待ちます
        （もしテストに失敗したら）:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
                own >> develop（カードの左上）>> Test（タブ）  #template: __RepositoryName__
            View log ボタン（右上）:
            Doanload artifacts ボタン:
            #// 上記のボタンで表示される内容を確認してデバッグしてください
            デバッグが完了したらリポジトリにプッシュして CI/CD パイプラインを動かしてください:
                #Git bash など
                - git add "."
                - git commit -a -m "Added Amplify Console staging environment"
                - git push
        開発者以外が使えないようにするために、Basic 認証を追加します:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
                (アプリ名) >> アクセスコントロール (左) >> アクセスの管理（右上）
            ブランチ名: develop
            Access setting: 制限-パスワードが必須です
            username: staging  #// 例
            password: 12345aA19FEpQninoAFE83e #template: __StagingPassword__
            Save ボタン:
            #// Web アプリを起動して、Basic 認証してから表示できることをチェックします

Lambda from GraphQL のログを取れるようにします:
    設定: #settings:
        __AWS_AccountID__: 123456789012  #★秘密:仮
        __AWS_UserName__: user1
        __RegionName__: 東京  #// CodePipeline のパイプラインを作成するリージョンの名前
        __RegionID__: ap-northeast-1  #// __RegionName__ の ID
        __AWS_AdministratorGroup__: AdministratorGroup
        __AmplifyUser__: amplify-react4  #// Amplify 用 IAM ユーザー、Amplify CLI で必要な権限を持つ
        __AmplifyUserAccessKeyID__: AKIAZQ0A0A0A0A0A0A0A  #★秘密:仮  #// 手順内でメモする値
        __AmplifySecretAccessKey__: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #★秘密:仮  #// 手順内でメモする値
        __CLI_Profile__: amplify-react4  #// aws 関連の CLI のプロファイル名
        __GitHubOwnerAccount__: Takakiriy  #// リポジトリのオーナーのアカウント名
        __GitHubCollaboratorAccount__: Takakiriy  #// リポジトリにアクセスするユーザーのアカウント名
        __GitCollaboratorName__: Your Name        #// git log コマンドで表示されるユーザー名
        __GitCollaboratorMail__: you@example.com  #// git log コマンドで表示されるメールアドレス
        __RepositoryName__: react4  #// アプリケーション名
        __BackupName__: react4_back_up
        __AppUserName__: example1
        __AppUserMail__: example@example.com  #★秘密:仮
        __AppUserPassword__: 12345a_A
        __FirstFunctionName__: createExample
    （下記は、下記「AMPLIFY SNS WORKSHOP」の amplify add api コマンドまでのコピーです）:
        準備:
            参考:
                - AMPLIFY SNS WORKSHOP
                    https://amplify-sns.workshop.aws/ja/
                - 継続的デプロイを使用した静的ウェブホスティング
                    https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-1/
                - AWS Amplify と Vue.js を使って、基本的な認証と CRUD 操作ができる Web アプリケーションを作る
                    https://aws.amazon.com/jp/builders-flash/202008/amplify-crud-app/
            ローカルPCへ各種ソフトウェアをインストールします:
                Node.js をインストールします:
                    - https://nodejs.org/ja/download/ >> Windows Installer (.msi) >> 64-bit
                    - node-v12.19.0-x64.exe をダブルクリックします
                    - インストール オプションはデフォルトを使用
                Git for Windows をインストールします:
                    - https://git-scm.com/ >> Downloads >> Windows
                    - Git-2.29.0-64-bit.exe をダブルクリックします
                    - Next を8回押す
                    - Configuring the line ending conversions: Checkout as-is, commit as-is
                    - 他のインストール オプションはデフォルトを使用
                    - デスクトップを右クリック >> Git Bash Here
                    - git clone  "https://github.com/githubtraining/hellogitworld.git"
                    - 成功したら、デスクトップにある hellogitworld フォルダーを削除します ( rm -rf hellogitworld )
                    - Git のユーザー名を設定します:
                        - git config --global user.email "you@example.com"  #template: "__GitCollaboratorMail__"
                        - git config --global user.name  "Your Name"        #template: "__GitCollaboratorName__"
                    - Git bash を閉じます:
                Visual Studio Code をインストールします:
                    - https://code.visualstudio.com/
                    - インストール オプションはデフォルトを使用
                    - 必要なら、Visual Studio Code をタスクバーにピン止めします
            Git リポジトリを作成します:
                参考: AMPLIFY SNS WORKSHOP >> GITHUBと連携してCI/CD環境を構築する(1)
                    https://amplify-sns.workshop.aws/ja/70_multi_env/10_amplify_console/connect_github.html
                GitHub のアカウントを作成します:
                GitHub にサインインします:
                    メニュー: https://github.com/ >> 三（右上） >> Sign in
                    Sign in ページ:
                        Username or email address: Takakiriy  #template: __GitHubCollaboratorAccount__
                        Password: ____
                        Sign in ボタン:
                    ブラウザーを閉じます:
                GitHub にリポジトリを新規作成します:
                    リポジトリを作成します:
                        メニュー: https://github.com/ >>（Repositories）New （左上）
                        Repository name: react4  #template: __RepositoryName__
                        Public or Private: Private
                        Create repository ボタン:
                        ブラウザーを閉じます:
                    プライベート リポジトリに接続してダウンロード（クローン）します:
                        #Git bash:
                        - cd  "__ParentOfProject__"
                        - git clone "https://github.com/Takakiriy/react4.git"  #template: https://github.com/__GitHubOwnerAccount__/__RepositoryName__.git
                            #// ここでエラーになるときは Git をアンインストール＆インストールしてください
                        - Sign in with your browser ボタン  #// プライベート リポジトリのときだけこのボタンが表示されます
                        - 表示されたアカウント名を確認: wants to access your Takakiriy account
                            #template: wants to access your __GitHubCollaboratorAccount__ account
                        - Authorize GitCredentialManager ボタン
                        - 成功したらブラウザーを閉じます:
        React のプロジェクトを作成します:
            React のプロジェクトを新規作成してコミットします（リポジトリの内容がまだないとき）:
                #Git bash
                - cd  "react4"  #template: "__RepositoryName__"
                - cd  ".."
                - npx create-react-app  "react4"  #template: "__RepositoryName__"
                    #// npx create-react-app --template typescript  "react4"  #template: "__RepositoryName__"
                - cd  "react4"  #template: "__RepositoryName__"
                - npm start  #// 動作確認します
                    #// Windows Defender によって警告されたときは、アクセス許可します
                    #// ブラウザーが開いたら閉じます
                - (Ctrl + C で Web サーバーを終了します)
                - git add "."
                - git commit -a -m "First commit"
                - git push
                - Git bash を閉じます
        React のプロジェクトに Amplify を追加します:
            aws のアカウントを作成します:
            aws にサインインしてリージョンを選択します:
                AWS マネジメント コンソールにサインインします:
                    URL: https://console.aws.amazon.com/
                    （ユーザー）: IAM ユーザー
                    アカウントID: 123456789012  #template: __AWS_AccountID__
                    次へ ボタン:
                    ユーザー名: user1  #template: __AWS_UserName__
                    パスワード: __AWS_UserPassword__
                    サインイン ボタン:
                リージョン: 東京 （右上） #template: __RegionName__
                ブラウザーを閉じます:
            Amplify CLI をインストールしてセットアップします:
                参考:
                    - Install the Amplify CLI
                        https://docs.amplify.aws/cli/start/install#option-1-watch-the-video-guide
                    - AMPLIFY SNS WORKSHOP >> INSTALL & CONFIGS
                        https://amplify-sns.workshop.aws/ja/00_prerequisites/20_install_and_configs.html
                Amplify CLI をインストールします:
                    #Git bash
                    #//任意のフォルダーで
                    - npm install -g @aws-amplify/cli
                    - amplify -v  #// 4.31.0
                Amplify CLI をセットアップします:
                    起動コマンド:
                        #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                        - cd "react4"  #template: "__RepositoryName__"
                        - amplify configure
                    ブラウザーが開くので、サインインできていることを確認します:
                    amplify configure の続きを表示します（Enter キーを押します）:
                    region: ap-northeast-1  #template: __RegionID__
                    user name: amplify-react4  #template: __AmplifyUser__
                    (ブラウザーが開きます):
                        メニュー: ユーザー >> ユーザーを追加
                        ユーザー名: amplify-react4  #template: __AmplifyUser__
                        アクセスの種類:
                            チェック:
                                プログラムによるアクセス
                            チェックしない:
                                AWS マネジメントコンソールへのアクセス:
                            次のステップ ボタン:
                        ユーザーをグループに追加:
                            選択するグループ（にチェックを入れます）:
                                - AdministratorGroup  #template: __AWS_AdministratorGroup__
                            次のステップ ボタン:
                        タグの追加:
                            次のステップ ボタン:
                        確認:
                            ユーザーの作成 ボタン:
                        アクセスキーをメモします:
                            アクセスキー ID: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                            シークレットアクセスキー: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
                            閉じる ボタン（右下）:
                        ブラウザーを閉じます:
                    amplify configure の続きを表示します（Enter キーを押します）(2):
                    accessKeyId: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                    secretAccessKey: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
                    Profile Name: amplify-react4  #template: __CLI_Profile__
            React のプロジェクトに Amplify を追加します:
                参考: AMPLIFY SNS WORKSHOP >> BOOTSTRAP
                    https://amplify-sns.workshop.aws/ja/30_mock/00_bootstrap.html
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - cd  "react4"  #template: "__RepositoryName__"
                    - amplify init
                Enter a name for the project: react4  #// そのまま Enter  #template: __RepositoryName__
                Enter a name for the environment: production
                Choose your default editor: Visual Studio Code  #// そのまま Enter
                Choose the type of app that you're building: javascript  #// そのまま Enter
                What javascript framework are you using: react  #// そのまま Enter
                Source Directory Path: src  #// そのまま Enter
                Distribution Directory Path: build  #// そのまま Enter
                Build Command: npm.cmd run-script build  #// そのまま Enter
                Start Command: npm.cmd run-script start  #// そのまま Enter
                Do you want to use an AWS profile?: Y (Yes)  #// そのまま Enter
                Please choose the profile you want to use: amplify-react4  #template: __CLI_Profile__
        認証機能（Amplify auth）(authentication) のカテゴリーを追加します:
            参考: AMPLIFY SNS WORKSHOP >> 認証機能
                https://amplify-sns.workshop.aws/ja/30_mock/10_auth.html
            Amplify auth のカテゴリーを追加します（amplify add auth コマンド）:
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - cd  "react4"  #template: "__RepositoryName__"
                    - amplify add auth
                Do you want to use the default authentication and security configuration?: Default configuration  #// そのまま Enter
                How do you want users to be able to sign in?: Username  #// そのまま Enter
                Do you want to configure advanced settings?: No, I am done.  #// そのまま Enter
                コマンド:
                    - amplify status  #// Auth カテゴリーが追加されていることを確認します
                    - amplify push  #// バックエンドをクラウドに反映させます
            フロントエンドを作成します:
                必要な Node パッケージをインストールします:
                    - cd  "react4"  #template: "__RepositoryName__"
                    - npm install --save  "aws-amplify"  "aws-amplify-react"
                __Project__/src/App.js ファイルを置き換えます:
                    - ./workshop/10_auth/App.js ファイルをコピーします
            動作確認をします:
                コマンド:
                    - npm start
                (ブラウザーが開きます):
                    「アカウントを作る」をクリック:
                    サインアップ画面:
                        ユーザー名: example1  #template: __AppUserName__
                        パスワード: 12345a_A  #template: __AppUserPassword__
                        メールアドレス: example@example.com  #template: __AppUserMail__
                        アカウントを作る ボタン:
                        確認コード: ____
                        確定 ボタンをクリック:
                    または、サインイン画面:
                        ユーザー名: example1  #template: __AppUserName__
                        パスワード: 12345a_A  #template: __AppUserPassword__
                        サインイン ボタンをクリック:
                    Hello World! と表示されることを確認します:
                    ブラウザーを閉じます:
                Ctrl + C キーで npm start を終了します:
            ユーザーが登録されていることを確認します:
                メニュー: https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                    react400005678_userpool_00005678-production >> ユーザーとグループ（左上）
                        #template: __RepositoryName__00005678_
                ユーザー名: example1  #template: __AppUserName__
        GitHub リポジトリへコミットします:
            #Git bash
            - cd  "react4"  #template: "__RepositoryName__"
            - git status  #// 変更されたファイルが表示されます
            - git add "."
            - git commit -a -m "Added auth (Cognito authentication)"
            - git push
        Amplify API (GraphQL) のカテゴリーを追加します（amplify add api コマンド）:
            参考: AMPLIFY SNS WORKSHOP >> POST機能 BACK-END(1)
                https://amplify-sns.workshop.aws/ja/30_mock/20_post_back_end.html
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "react4"  #template: "__RepositoryName__"
                - amplify add api
            Please select from one of the below mentioned services: GraphQL
            Provide API name: api1
            Choose the default authorization type for the API: Amazon Cognito User Pool
            Do you want to configure advanced settings for the GraphQL API: No, I am done.
            Do you have an annotated GraphQL schema?: No
            Choose a schema template: Single object with fields
            Do you want to edit the schema now?: No
    プロジェクト フォルダーのバックアップをとります（コミットされないファイルがある可能性があるため）:
        #Git bash
        - cd  "react4"  #template: "__RepositoryName__"
        - rm -rf  "node_modules"
        - tar cvzf  "../react4_back_up.tar.gz"  "."  #// tar.gz に圧縮します  #template: ../__BackupName__.tar.gz
        - npm ci  #// node_modules を復活します
    amplify/backend/api/api1/schema.graphql を下記の内容に置き換えます : |
        type Post
            @model (subscriptions: { level: public })
            @auth(rules: [
                {allow: owner, ownerField:"owner", provider: userPools, operations:[read, create]}
                {allow: private, provider: userPools, operations:[read]}
            ])
        {
            type: String!  #// always set to 'post'. used in the SortByTimestamp GSI
            id: ID
            content: String!
        }

        type Mutation
        {
            createExample(  #template: __FirstFunctionName__
                content: String!
            ): String
                @function(name: "createExample-${env}")  #template: __FirstFunctionName__
                @auth(rules: [
                    {allow: private, provider: userPools},
                ])
        }
    src/App.js を下記の内容に置き換えます : |
        import React from 'react';
        import Amplify from '@aws-amplify/core';
        import awsmobile from './aws-exports';
        import Auth from '@aws-amplify/auth';
        import API, { graphqlOperation } from '@aws-amplify/api';
        import { createExample } from './graphql/mutations';  //#template: __FirstFunctionName__
        import { withAuthenticator } from 'aws-amplify-react';

        Amplify.configure(awsmobile);

        export class  App extends React.Component {
            render() {
                return (
                    <div>
                        <h1>
                            Hello World!!
                        </h1>
                        <button onClick={this.handleChange.bind(this)}>Call</button>
                    </div>
                );
            }

            async componentDidMount() {
                const currentUser = await Auth.currentAuthenticatedUser();
                console.log(currentUser);
            }

            async handleChange(e) {
                console.log('calling!');
                const subscription = await API.graphql(graphqlOperation(
                    createExample, {content: 'ABC'}  //#template: __FirstFunctionName__
                )).catch( (e) => {
                    console.log(e);
                });
                console.log(subscription);
                console.log('called!');
            }
        }

        export default withAuthenticator(App, {
            signUpConfig: {
                hiddenDefaults: ['phone_number']
            }
        });
    Lambda 関数を追加します:
        参考: AMPLIFY SNS WORKSHOP >> TIMELINE機能 ＠FUNCTION
            https://amplify-sns.workshop.aws/50_follow_timeline/30_function_directive.html
        関数カテゴリーを追加します:
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "react4"  #template: "__RepositoryName__"
                - amplify add function
            Select which capability you want to add: Lambda function
            Provide a friendly name for your resource to be used as ...: createExample  #template: __FirstFunctionName__
            Provide the AWS Lambda function name: createExample  #template: __FirstFunctionName__
            Choose the runtime that you want to use: NodeJS
            Choose the function template that you want to use: Hello World
            Do you want to access other resources created in this project from your Lambda function?: Yes
            Select the category: [api]
            Select the operations you want to permit ...: [create, read]
            Do you want to invoke this function on a recurring schedule?: n
            Do you want to configure Lambda layers for this function?: n
            Do you want to edit the local lambda function now?: y
            #// 以上で、amplify\backend\function\createExample が作られます  #template: __FirstFunctionName__
            #// 最後のオプションで amplify/backend/function/createExample/src/index.js がエディターが開きます  #template: __FirstFunctionName__
        開いたファイルの exports.handler の定義を下記の内容に置き換えます: |
            exports.handler = async (event) => {
                console.log('Lambda handler called.');
                console.log(event);

                return 'returnValue';
            };
    デプロイします:
        起動コマンド:
            #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
            - cd  "react4"  #template: "__RepositoryName__"
            - amplify push
        Are you sure you want to continue?: y  #// そのまま Enter
        Do you want to generate code for your newly created GraphQL API: y  #// そのまま Enter
        Choose the code generation language target: javascript  #// そのまま Enter
        Enter the file name pattern of graphql queries, ...: src\graphql\**\*.js  #// そのまま Enter
        Do you want to generate/update all possible GraphQL operations ...: y  #// そのまま Enter
        Enter maximum statement depth: 2  #// そのまま Enter
        #// これだけ多くオプションが表示されるのは amplify add api を実行した後の最初の amplify push のときだけです
    Lambda 関数の動作確認をします:
        ローカルのフロントエンドを実行してクラウドにあるバックエンドを動かします:
            シェルでの操作:
                #新しい Git bash
                - cd "react4"  #template: "__RepositoryName__"
                - npm ci  #// node_modules フォルダーが無いとき 
                - npm start
            (ブラウザーが開きます):
                Hello World! と表示されることを確認します:
                F12 キーを押して、コンソール タブを開きます:
                Call ボタンを押して、バックエンドを動かします:
        バックエンドのログを確認します:
            - https://console.aws.amazon.com/lambda/ >> createExample  #template: __FirstFunctionName__
            - モニタリング（タブ）>> CloudWatch のログを表示（上）
        bash のウィンドウで Ctrl + C キーを押して npm start を終了します:
    コミットします:
        - git add "."
        - git commit -a -m "Added GraphQL Lambda Function"
        - git push

Amplify CLI を使うプロジェクトに新しい人が参加するとき:
    #// または、ローカル環境を構築し直すとき
    #// マスターはクラウドとGitHubの両方です
    設定: #settings:
        __AWS_AccountID__: 123456789012  #★秘密:仮
        __AWS_UserName__: user1
        __RegionName__: 東京  #// CodePipeline のパイプラインを作成するリージョンの名前
        __RegionID__: ap-northeast-1  #// __RegionName__ の ID
        __AmplifyUser__: own-amplify  #// Amplify 用 IAM ユーザー、Amplify CLI で必要な権限を持つ
        __AmplifyRole__: own-amplifyconsole-backend-role
        __AmplifyUserAccessKeyID__: AKIAZQ0A0A0A0A0A0A0A  #★秘密:仮  #// 手順内でメモする値
        __AmplifySecretAccessKey__: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #★秘密:仮  #// 手順内でメモする値
        __CLI_Profile__: own-amplify  #// aws 関連の CLI のプロファイル名
        __GitHubOwnerAccount__: Takakiriy  #// リポジトリのオーナーのアカウント名
        __GitHubCollaboratorAccount__: Takakiriy  #// リポジトリにアクセスするユーザーのアカウント名
        __GitCollaboratorName__: Your Name  #// git log コマンドで表示されるユーザー名
        __GitCollaboratorMail__: you@example.com  #// git log コマンドで表示されるメールアドレス
        __RepositoryName__: own  #// アプリケーション名
        __ProductBranchName__: master  #// 本番用のブランチ名
        __AppUserName__: example1
        __AppUserMail__: example@example.com  #★秘密:仮
        __AppUserPassword__: 12345a_A
        __FirstFunctionName__: createExample
    準備:
        新しい人が Amplify で操作するときの権限を持った IAMユーザーの情報を教えてもらいます:
            IAMユーザー: own-amplify  #template: __AmplifyUser__
            アクセスキー ID: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
            シークレットアクセスキー: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
        GitHub のリポジトリの管理者に招待してもらいます（管理者の操作）:
            参考: GitHub >> コラボレーターを個人リポジトリに招待する
                https://docs.github.com/ja/free-pro-team@latest/github/setting-up-and-managing-your-github-user-account/inviting-collaborators-to-a-personal-repository
            メニュー:
                - https://github.com/Takakiriy/own >>  #template: https://github.com/__GitHubOwnerAccount__/__RepositoryName__
                - Setting (タブ) >> Manage access（左）>> Invite a collaborator
            招待する人: Takakiriy  #template: __GitHubCollaboratorAccount__
            Add NAME to REPOSITORY ボタン:  #// 押すとリポジトリへの招待メールが発送されます
            招待を受けた人は招待を受け入れます:
                - 届いたメールにあるボタンを押します
                - View invitation >> Accept invitation
            管理者の Manage access のページに表示される招待したユーザーが Pending 状態の表示ではなくなります:
        ローカルPCへ各種ソフトウェアをインストールします:
            Node.js をインストールします:
                - https://nodejs.org/ja/download/ >> Windows Installer (.msi) >> 64-bit
                - node-v12.19.0-x64.exe をダブルクリックします
                - インストール オプションはデフォルトを使用
            Git for Windows をインストールします:
                - https://git-scm.com/ >> Downloads >> Windows
                - Git-2.29.0-64-bit.exe をダブルクリックします
                - Next を8回押す
                - Configuring the line ending conversions: Checkout as-is, commit as-is
                - 他のインストール オプションはデフォルトを使用
                - デスクトップを右クリック >> Git Bash Here
                - git clone  "https://github.com/githubtraining/hellogitworld.git"
                - 成功したら、デスクトップにある hellogitworld フォルダーを削除します ( rm -rf hellogitworld )
                - Git のユーザー名を設定します:
                    - git config --global user.email "you@example.com"  #template: "__GitCollaboratorMail__"
                    - git config --global user.name  "Your Name"        #template: "__GitCollaboratorName__"
                - Git bash を閉じます:
            Visual Studio Code をインストールします:
                - https://code.visualstudio.com/
                - インストール オプションはデフォルトを使用
                - 必要なら、Visual Studio Code をタスクバーにピン止めします
    Amplify CLI をインストールします:
        aws のアカウントを作成します:
        aws にサインインしてリージョンを選択します:
            AWS マネジメント コンソールにサインインします:
                URL: https://console.aws.amazon.com/
                （ユーザー）: IAM ユーザー
                アカウントID: 123456789012  #template: __AWS_AccountID__
                次へ ボタン:
                ユーザー名: user1  #template: __AWS_UserName__
                パスワード: __AWS_UserPassword__
                サインイン ボタン:
            リージョン: 東京 （右上） #template: __RegionName__
            ブラウザーを閉じます:
        Amplify CLI をインストールしてセットアップします:
            参考:
                - Install the Amplify CLI
                    https://docs.amplify.aws/cli/start/install#option-1-watch-the-video-guide
                - AMPLIFY SNS WORKSHOP >> INSTALL & CONFIGS
                    https://amplify-sns.workshop.aws/ja/00_prerequisites/20_install_and_configs.html
            Amplify CLI をインストールします:
                #Git bash
                #//任意のフォルダーで
                - npm install -g @aws-amplify/cli
                - amplify -v  #// 4.32.0
            Amplify CLI をセットアップします:
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - amplify configure
                ブラウザーが開いたら、すでにサインインできていることを確認し、ブラウザーを閉じます:
                amplify configure の続きを表示します（Enter キーを押します）:
                region: ap-northeast-1  #template: __RegionID__
                user name: own-amplify  #template: __AmplifyUser__
                ブラウザーが開いたらアクセスキーを確認します:
                    - ユーザー >> own-amplify  #template: __AmplifyUser__
                    - 認証情報（タブ） >> アクセスキー ID:
                    - accessKeyId: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                    - ブラウザーを閉じます:
                amplify configure の続きを表示します（Enter キーを押します）(2):
                シークレットアクセスキーを教えてもらい、入力します:
                    accessKeyId: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                    secretAccessKey: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
                Profile Name: own-amplify  #template: __CLI_Profile__
    プライベート リポジトリに接続してダウンロード（クローン）します:
        #Git bash:
        - cd  "__ParentOfProject__"
        - git clone "https://github.com/Takakiriy/own.git"  #template: https://github.com/__GitHubOwnerAccount__/__RepositoryName__.git
            #// ここでエラーになるときは Git をアンインストール＆インストールしてください
        - Sign in with your browser ボタン  #// プライベート リポジトリのときだけこのボタンが表示されます
        - Username: Takakiriy または Takakiriy  #template: __GitHubCollaboratorAccount__ または __GitHubOwnerAccount__
        - 認証に成功したらブラウザーを閉じます:
    aws のリソースと接続します:
        起動コマンド:
            #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
            - cd "own"  #template: "__RepositoryName__"
            - amplify pull
        Do you want to use an AWS profile?: y
        Please choose the profile you want to use: own-amplify  #template: __CLI_Profile__
        Which app are you working on?: own  #template: __RepositoryName__
        Choose your default editor: Visual Studio Code  #// そのまま Enter
        Choose the type of app that you're building: javascript  #// そのまま Enter
        What javascript framework are you using: react  #// そのまま Enter
        Source Directory Path: src  #// そのまま Enter
        Distribution Directory Path: build  #// そのまま Enter
        Build Command: npm.cmd run-script build  #// そのまま Enter
        Start Command: npm.cmd run-script start  #// そのまま Enter
        Do you plan on modifying this backend?: y
    aws のリソースと接続しできたことを確認します:
        #Git bash or Git CMD
        - cd "own"  #template: "__RepositoryName__"
        - amplify status
    （必要なら）Amplify Console に CI/CD環境を構築します（hosting カテゴリーの追加）:  #// 上記「hosting カテゴリーの追加」のコピー
        参考: AMPLIFY SNS WORKSHOP >> 手動デプロイ
            https://amplify-sns.workshop.aws/ja/40_hosting/00_manual_deployment.html
        Amplify hosting のカテゴリーを追加します:
            コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd "__Project__"
                - amplify add hosting
            Select the plugin module to execute: Hosting with Amplify Console (...)
            Choose a type Manual deployment: Continuous deployment
            (ブラウザーが開きます):
                Connect a frontend web app: GitHub
                Continue ボタン:
                    (aws と GitHub の接続がされていなかったとき):
                        表示されたアカウント名を確認: wants to access your Takakiriy account
                            #template: wants to access your __GitHubOwnerAccount__ account
                        Authorize GitCredentialManager ボタン:
                リポジトリブランチの追加:
                    リポジトリ: Takakiriy/own  #template: __GitHubOwnerAccount__/__RepositoryName__
                    ブランチ: master  #template: __ProductBranchName__
                    次へ ボタン:
                ビルド設定の構成:
                    チェック: Deploy updates to backend resources with your frontend on every code commit
                    Select a backend evironment: production
                    Create new role ボタン:
                        ユースケースの選択:
                            次のステップ ボタン:
                        Attached アクセス権限ポリシー:
                            次のステップ ボタン:
                        タグの追加 (オプション):
                            次のステップ ボタン:
                        確認:
                            ロール名: own-amplifyconsole-backend-role  #template: __AmplifyRole__
                            ロールの作成 ボタン:
                        IAM が表示されているブラウザーのタブを閉じます:
                    Select an existing service role ...: own-amplifyconsole-backend-role  #template: __AmplifyRole__
                        #// ロール名を入力する右にある右回りボタンを押すと選べるようになります
                    次へ ボタン:
                確認:
                    保存してデプロイ ボタン:
                #// プロビジョン >> ビルド >> デプロイ >> 検証 が完了するまで待ちます（約7分）
                #// 初回のテストはスキップされます
                #// https://..（左下）をクリックすると実行します
                #// 登録済みのユーザーの一覧を見るには、 
                #//     https://ap-northeast-1.console.aws.amazon.com/cognito/home >>
                #//     ユーザープールの管理 >> own... >> ユーザーとグループ  #template: __RepositoryName__
                #// master（右半分の左上）をクリックするとデプロイのログが表示されます
                #// Amplify Console URL: https://console.aws.amazon.com/amplify/
            Continuous deployment is configured in the Amplify Console...:  #// Enter キーを押します
            (下記のように表示されます。Domaiin 列はバックエンドのURLです): |
                ┌──────────────┬──────────────────────────────────────────────┐
                │ FrontEnd Env │ Domain                                       │
                ├──────────────┼──────────────────────────────────────────────┤
                │ master       │ https://master.d2oudfgbjw0ivu.amplifyapp.com │
                └──────────────┴──────────────────────────────────────────────┘
            コミットすると CI/CD パイプラインが動くことを確認します:
                - たとえば __Project__/public/index.html の <titie> を変更します
                - git add "."
                - git commit -a -m "added Amplify hosting"
                - git push
    （必要なら）デプロイできることを確認します（アプリケーションによって詳細は変わります）:
        amplify/backend/function/createExample/src/index.js の exports.handler に追加: |  #template: __FirstFunctionName__
            console.log('amplify push test.');
        デプロイします:
            #Git bash or Git CMD
            - cd "own"  #template: "__RepositoryName__"
            - amplify push
        ローカルのフロントエンドを実行してクラウドにあるバックエンドを動かします:
            シェルでの操作:
                #新しい Git bash
                - cd "own"  #template: "__RepositoryName__"
                - npm ci  #// node_modules フォルダーが無いとき 
                - npm start
            (ブラウザーが開きます):
                「アカウントを作る」をクリック:
                サインアップ画面:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345a_A  #template: __AppUserPassword__
                    メールアドレス: example@example.com  #template: __AppUserMail__
                    アカウントを作る ボタン:
                    確認コード: ____
                    確定 ボタンをクリック:
                または、サインイン画面:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345a_A  #template: __AppUserPassword__
                    サインイン ボタンをクリック:
                Hello World! と表示されることを確認します:
                F12 キーを押して、コンソール タブを開きます:
                Call ボタンを押して、バックエンドを動かします:
        バックエンドのログを確認します:
            - https://console.aws.amazon.com/lambda/ >> createExample  #template: __FirstFunctionName__
            - モニタリング（タブ）>> CloudWatch のログを表示（上）
        bash のウィンドウで Ctrl + C キーを押して npm start を終了します:

aws 公式：AMPLIFY SNS WORKSHOP（途中まで）:
    #// AWS Amplify、Amazon Cognito、GitHub を使用
    参考:
        - AMPLIFY SNS WORKSHOP
            https://amplify-sns.workshop.aws/ja/
        - 継続的デプロイを使用した静的ウェブホスティング
            https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-1/
        - AWS Amplify と Vue.js を使って、基本的な認証と CRUD 操作ができる Web アプリケーションを作る
            https://aws.amazon.com/jp/builders-flash/202008/amplify-crud-app/
    設定: #settings:
        __AWS_AccountID__: 123456789012  #★秘密:仮
        __AWS_UserName__: user1
        __RegionName__: 東京  #// CodePipeline のパイプラインを作成するリージョンの名前
        __RegionID__: ap-northeast-1  #// __RegionName__ の ID
        __AWS_AdministratorGroup__: AdministratorGroup
        __AmplifyUser__: user-react3-amplify  #// Amplify 用 IAM ユーザー、Amplify CLI で必要な権限を持つ
        __AmplifyUserAccessKeyID__: AKIAZQ0A0A0A0A0A0A0A  #★秘密:仮  #// 手順内でメモする値
        __AmplifySecretAccessKey__: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #★秘密:仮  #// 手順内でメモする値
        __CLI_Profile__: amplify-react3  #// aws 関連の CLI のプロファイル名
        __AmplifyRole__: amplifyconsole-backend-react3
        __GitHubOwnerAccount__: Takakiriy  #// リポジトリのオーナーのアカウント名
        __GitHubCollaboratorAccount__: Takakiriy  #// リポジトリにアクセスするユーザーのアカウント名
        __GitCollaboratorName__: Your Name        #// git log コマンドで表示されるユーザー名
        __GitCollaboratorMail__: you@example.com  #// git log コマンドで表示されるメールアドレス
        __RepositoryName__: react3  #// アプリケーション名
        __ProductBranchName__: master  #// 本番用のブランチ名
        __AppUserName__: example1
        __AppUserMail__: example@example.com  #★秘密:仮
        __AppUserPassword__: 12345aA_
        __StagingPassword__: 12345aA19FEpQninoAFE83e  #★秘密:仮
    準備:
        ローカルPCへ各種ソフトウェアをインストールします:
            Node.js をインストールします:
                - https://nodejs.org/ja/download/ >> Windows Installer (.msi) >> 64-bit
                - node-v12.19.0-x64.exe をダブルクリックします
                - インストール オプションはデフォルトを使用
            Git for Windows をインストールします:
                - https://git-scm.com/ >> Downloads >> Windows
                - Git-2.29.0-64-bit.exe をダブルクリックします
                - Next を8回押す
                - Configuring the line ending conversions: Checkout as-is, commit as-is
                - 他のインストール オプションはデフォルトを使用
                - デスクトップを右クリック >> Git Bash Here
                - git clone  "https://github.com/githubtraining/hellogitworld.git"
                - 成功したら、デスクトップにある hellogitworld フォルダーを削除します ( rm -rf hellogitworld )
                - Git のユーザー名を設定します:
                    - git config --global user.email "you@example.com"  #template: "__GitCollaboratorMail__"
                    - git config --global user.name  "Your Name"        #template: "__GitCollaboratorName__"
                - Git bash を閉じます:
            Visual Studio Code をインストールします:
                - https://code.visualstudio.com/
                - インストール オプションはデフォルトを使用
                - 必要なら、Visual Studio Code をタスクバーにピン止めします
        Git リポジトリを作成します:
            参考: AMPLIFY SNS WORKSHOP >> GITHUBと連携してCI/CD環境を構築する(1)
                https://amplify-sns.workshop.aws/ja/70_multi_env/10_amplify_console/connect_github.html
            GitHub のアカウントを作成します:
            GitHub にサインインします:
                メニュー: https://github.com/ >> 三（右上） >> Sign in
                Sign in ページ:
                    Username or email address: Takakiriy  #template: __GitHubCollaboratorAccount__
                    Password: ____
                    Sign in ボタン:
                ブラウザーを閉じます:
            GitHub にリポジトリを新規作成します:
                リポジトリを作成します:
                    メニュー: https://github.com/ >>（Repositories）New （左上）
                    Repository name: react3  #template: __RepositoryName__
                    Public or Private: Private
                    Create repository ボタン:
                    ブラウザーを閉じます:
                プライベート リポジトリに接続してダウンロード（クローン）します:
                    #Git bash:
                    - cd  "__ParentOfProject__"
                    - git clone "https://github.com/Takakiriy/react3.git"  #template: https://github.com/__GitHubOwnerAccount__/__RepositoryName__.git
                        #// ここでエラーになるときは Git をアンインストール＆インストールしてください
                    - Sign in with your browser ボタン  #// プライベート リポジトリのときだけこのボタンが表示されます
                    - 表示されたアカウント名を確認: wants to access your Takakiriy account
                        #template: wants to access your __GitHubCollaboratorAccount__ account
                    - Authorize GitCredentialManager ボタン
                    - 成功したらブラウザーを閉じます:
    React のプロジェクトを作成します:
        React のプロジェクトを新規作成してコミットします（リポジトリの内容がまだないとき）:
            #Git bash
            - cd  "react3"  #template: "__RepositoryName__"
            - cd  ".."
            - npx create-react-app  "react3"  #template: "__RepositoryName__"
                #// npx create-react-app --template typescript  "react3"  #template: "__RepositoryName__"
            - cd  "react3"  #template: "__RepositoryName__"
            - npm start  #// 動作確認します
                #// Windows Defender によって警告されたときは、アクセス許可します
                #// ブラウザーが開いたら閉じます
            - (Ctrl + C で Web サーバーを終了します)
            - git add "."
            - git commit -a -m "First commit"
            - git push
            - Git bash を閉じます
    React のプロジェクトに Amplify を追加します:
        aws のアカウントを作成します:
        aws にサインインしてリージョンを選択します:
            AWS マネジメント コンソールにサインインします:
                URL: https://console.aws.amazon.com/
                （ユーザー）: IAM ユーザー
                アカウントID: 123456789012  #template: __AWS_AccountID__
                次へ ボタン:
                ユーザー名: user1  #template: __AWS_UserName__
                パスワード: __AWS_UserPassword__
                サインイン ボタン:
            リージョン: 東京 （右上） #template: __RegionName__
            ブラウザーを閉じます:
        Amplify CLI をインストールしてセットアップします:
            参考:
                - Install the Amplify CLI
                    https://docs.amplify.aws/cli/start/install#option-1-watch-the-video-guide
                - AMPLIFY SNS WORKSHOP >> INSTALL & CONFIGS
                    https://amplify-sns.workshop.aws/ja/00_prerequisites/20_install_and_configs.html
            Amplify CLI をインストールします:
                #Git bash
                #//任意のフォルダーで
                - npm install -g @aws-amplify/cli
                - amplify -v  #// 4.31.0
            Amplify CLI をセットアップします:
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - amplify configure
                ブラウザーが開くので、サインインできていることを確認します:
                amplify configure の続きを表示します（Enter キーを押します）:
                region: ap-northeast-1  #template: __RegionID__
                user name: user-react3-amplify  #template: __AmplifyUser__
                (ブラウザーが開きます):
                    メニュー: ユーザー >> ユーザーを追加
                    ユーザー名: user-react3-amplify  #template: __AmplifyUser__
                    アクセスの種類:
                        チェック:
                            プログラムによるアクセス
                        チェックしない:
                            AWS マネジメントコンソールへのアクセス:
                        次のステップ ボタン:
                    ユーザーをグループに追加:
                        選択するグループ（にチェックを入れます）:
                            - AdministratorGroup  #template: __AWS_AdministratorGroup__
                        次のステップ ボタン:
                    タグの追加:
                        次のステップ ボタン:
                    確認:
                        ユーザーの作成 ボタン:
                    アクセスキーをメモします:
                        アクセスキー ID: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                        シークレットアクセスキー: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
                        閉じる ボタン（右下）:
                    ブラウザーを閉じます:
                amplify configure の続きを表示します（Enter キーを押します）(2):
                accessKeyId: AKIAZQ0A0A0A0A0A0A0A  #template: __AmplifyUserAccessKeyID__
                secretAccessKey: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __AmplifySecretAccessKey__
                Profile Name: amplify-react3  #template: __CLI_Profile__
        React のプロジェクトに Amplify を追加します:
            参考: AMPLIFY SNS WORKSHOP >> BOOTSTRAP
                https://amplify-sns.workshop.aws/ja/30_mock/00_bootstrap.html
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "react3"  #template: "__RepositoryName__"
                - amplify init
            Enter a name for the project: react3  #// そのまま Enter  #template: __RepositoryName__
            Enter a name for the environment: production
            Choose your default editor: Visual Studio Code  #// そのまま Enter
            Choose the type of app that you're building: javascript  #// そのまま Enter
            What javascript framework are you using: react  #// そのまま Enter
            Source Directory Path: src  #// そのまま Enter
            Distribution Directory Path: build  #// そのまま Enter
            Build Command: npm.cmd run-script build  #// そのまま Enter
            Start Command: npm.cmd run-script start  #// そのまま Enter
            Do you want to use an AWS profile?: Y (Yes)  #// そのまま Enter
            Please choose the profile you want to use: amplify-react3  #template: __CLI_Profile__
    認証機能（Amplify auth）(authentication) のカテゴリーを追加します:
        参考: AMPLIFY SNS WORKSHOP >> 認証機能
            https://amplify-sns.workshop.aws/ja/30_mock/10_auth.html
        Amplify auth のカテゴリーを追加します（amplify add auth コマンド）:
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "react3"  #template: "__RepositoryName__"
                - amplify add auth
            Do you want to use the default authentication and security configuration?: Default configuration  #// そのまま Enter
            How do you want users to be able to sign in?: Username  #// そのまま Enter
            Do you want to configure advanced settings?: No, I am done.  #// そのまま Enter
            コマンド:
                - amplify status  #// Auth カテゴリーが追加されていることを確認します
                - amplify push  #// バックエンドをクラウドに反映させます
        フロントエンドを作成します:
            必要な Node パッケージをインストールします:
                - cd  "react3"  #template: "__RepositoryName__"
                - npm install --save  "aws-amplify"  "aws-amplify-react"
            __Project__/src/App.js ファイルを置き換えます:
                - ./workshop/10_auth/App.js ファイルをコピーします
        動作確認をします:
            コマンド:
                - npm start
            (ブラウザーが開きます):
                「アカウントを作る」をクリック:
                サインアップ画面:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345aA_  #template: __AppUserPassword__
                    メールアドレス: example@example.com  #template: __AppUserMail__
                    アカウントを作る ボタン:
                    確認コード: ____
                    確定 ボタンをクリック:
                サインイン画面:
                    ユーザー名: example1  #template: __AppUserName__
                    パスワード: 12345aA_  #template: __AppUserPassword__
                    サインイン ボタンをクリック:
                Hello World! と表示されることを確認します:
                ブラウザーを閉じます:
            Ctrl + C キーで npm start を終了します:
        ユーザーが登録されていることを確認します:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                react300005678_userpool_00005678-production >> ユーザーとグループ（左上）
                    #template: __RepositoryName__00005678_
            ユーザー名: example1  #template: __AppUserName__
    GitHub リポジトリへコミットします:
        #Git bash
        - cd  "react3"  #template: "__RepositoryName__"
        - git status  #// 変更されたファイルが表示されます
        - git add "."
        - git commit -a -m "Added auth (Cognito authentication)"
        - git push
    Amplify API (GraphQL) のカテゴリーを追加します:
        Amplify API (GraphQL) のカテゴリーを追加します（amplify add api コマンド）:
            参考: AMPLIFY SNS WORKSHOP >> POST機能 BACK-END(1)
                https://amplify-sns.workshop.aws/ja/30_mock/20_post_back_end.html
            起動コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - cd  "react3"  #template: "__RepositoryName__"
                - amplify add api
            Please select from one of the below mentioned services: GraphQL
            Provide API name: api1
            Choose the default authorization type for the API: Amazon Cognito User Pool
            Do you want to configure advanced settings for the GraphQL API: No, I am done.
            Do you have an annotated GraphQL schema?: No
            Choose a schema template: Single object with fields
            Do you want to edit the schema now?: No
        （GraphQL を知りたいなら）ローカルでバックエンド（GraphQL によるデータベース）の動作確認をします:
            #// スキップするときは、下記「GraphQL のスキーマにセカンダリ インデックスを追加します」だけ行ってください
            GraphQL のスキーマを編集します:
                react3/amplify/backend/api/api1/schema.graphql を下記に置き換えます: |  #template: __RepositoryName__/amplify/backend/api/api1/schema.graphql
                    type Post
                        @model (subscriptions: { level: public })
                        @auth(rules: [
                            {allow: owner, ownerField:"owner", provider: userPools, operations:[read, create]}
                            {allow: private, provider: userPools, operations:[read]}
                        ])
                    {
                        type: String!  #// always set to 'post'. used in the SortByTimestamp GSI
                        id: ID
                        content: String!
                        owner: String
                        timestamp: AWSTimestamp!
                    }
                #// スキーマには DynamoDB に関する設定が @model に、Cognito に関連する設定が @auth に含まれています
                #// 参考: https://amplify-sns.workshop.aws/ja/30_mock/20_post_back_end.html#post型の作成
            amplify mock api コマンドでビルドと、ローカルのデータベース操作アプリを実行します:
                #// エンドポイントの１つとして GUI の GraphiQL を開くこともできます
                準備:
                    Java をインストールします:
                        - https://aws.amazon.com/jp/corretto/ >> Amazon Corretto 11
                        - 表の中 >> Windows x64 >> https://.../msi
                        - インストール オプションはデフォルトを使用
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - cd  "react3"  #template: "__RepositoryName__"
                    - del "amplify\mock-data\dynamodb\fake_us-fake-1.db"  #// （２回目以降）前回のキャッシュを削除
                    - amplify mock api
                (以下は初回のみ入力が必要です):
                    Choose the code generation language target: javascript
                    Enter the file name pattern of graphql queries, ...: src/graphql/**/*.js  #// そのまま Enter
                    Do you want to generate/update all possible GraphQL operations ...: Yes
                    Enter maximum statement depth [...]: 3
                (起動に成功した時の表示): |
                    Generated GraphQL operations successfully and saved at src\graphql
                    AppSync Mock endpoint is running at http://192.168.2.110:20002
                表示された GraphiQL の URL をブラウザーで開きます:
                    Mutation(POST):
                        ADD NEW （左下）（の右のドロップダウンリスト）: Mutation
                        その右の＋ボタン:
                            createPost（左上）:
                                input*:
                                    content*: "test"
                                    timestamp*: 1585222654
                                    type*: "post"
                            #// 中央列の timestamp: "____" を timestamp: ____ に置き換えます:
                            #// Amplify GraphQL Explorer が AWSTimestamp型に対応していないため
                        Execute Query ボタン（中央上の▲）:
                        timestamp の値を 2000000000, 3000000000 に変えて、同様に Mutation を実行します:
                        query MyMutation （左上）にマウスを合わせて[×]:
                    Query(GET):
                        ADD NEW （左下）（の右のドロップダウンリスト）: Query
                        その右の＋ボタン:
                            listPosts（左上）:
                                items:
                                    content: チェック
                                    id: チェック
                                    owner: チェック
                                    timestamp: チェック
                                    type: チェック
                        Execute Query ボタン（中央上の▲）:
                        query MyQuery （左上）にマウスを合わせて[×]:
                    終了:
                        #// 終了するとローカル DB の内容が消えます
                        - ブラウザーを閉じます:
                        - amplify mock api を実行した bash で Ctrl + C を押します:
            GraphQL のスキーマにセカンダリ インデックスを追加します:
                react3/amplify/backend/api/api1/schema.graphql を下記に置き換えます: |  #template: __RepositoryName__/amplify/backend/api/api1/schema.graphql
                    type Post
                        @model (subscriptions: { level: public })
                        @auth(rules: [
                                {allow: owner, ownerField:"owner", provider: userPools, operations:[read, create]}
                                {allow: private, provider: userPools, operations:[read]}
                            ])
                        @key(name: "SortByTimestamp", fields:["type", "timestamp"], queryField: "listPostsSortedByTimestamp")
                        @key(name: "BySpecificOwner", fields:["owner", "timestamp"], queryField: "listPostsBySpecificOwner")
                    {
                        type: String!  #// always set to 'post'. used in the SortByTimestamp GSI
                        id: ID
                        content: String!
                        owner: String
                        timestamp: AWSTimestamp!
                    }
                #// @key が追加されました
                #// @key(name: "GSI名", fields:["パーティション キー", "ソート キー"], queryField: "query名")
                #//    query名は、amplify mock api コマンドでブラウザーに表示される GUI の Query の一覧に表示されます
                #// 参考: https://amplify-sns.workshop.aws/ja/30_mock/25_post_back_end_key.html#必要なクエリをkeyに落とし込む
            amplify mock api コマンドでローカルのデータベースを実行します(2回目):
                起動コマンド:
                    #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                    - cd  "react3"  #template: "__RepositoryName__"
                    - del "amplify\mock-data\dynamodb\fake_us-fake-1.db"  #// （２回目以降）前回のキャッシュを削除
                    - amplify mock api
                (起動に成功した時の表示): |
                    Generated GraphQL operations successfully and saved at src\graphql
                    AppSync Mock endpoint is running at http://192.168.2.110:20002
                表示された URL をブラウザーで開きます:
                    Mutation(POST):
                        ADD NEW （左下）（の右のドロップダウンリスト）: Mutation
                        その右の＋ボタン:
                            createPost（左上）:
                                input*:
                                    content*: "test"
                                    timestamp*: 1585222654
                                    type*: "post"
                        # 中央列の timestamp: "1585222654" を timestamp: 1585222654 に置き換えます:
                            #// Amplify GraphQL Explorer が AWSTimestamp型に対応していないため
                        Execute Query ボタン（中央上の▲）:
                        timestamp の値を 2000000000, 3000000000 に変えて、同様に Mutation を実行します:
                        query MyMutation （左上）にマウスを合わせて[×]:
                    ユーザーを変更します（？）:
                        Update Auth ボタン（上）:
                            Username: user_2
                            Generate Token ボタン:
                    Mutation(POST)(user_2):
                        ADD NEW （左下）（の右のドロップダウンリスト）: Mutation
                        その右の＋ボタン:
                            createPost（左上）:
                                input*:
                                    content*: "test"
                                    timestamp*: 4000000000
                                    type*: "post"
                        # 中央列の timestamp: "4000000000" を timestamp: 4000000000 に置き換えます:
                            #// Amplify GraphQL Explorer が AWSTimestamp型に対応していないため
                        Execute Query ボタン（中央上の▲）:
                        timestamp の値を 5000000000 に変えて、同様に Mutation を実行します:
                        query MyMutation （左上）にマウスを合わせて[×]:
                    Query(GET):
                        ADD NEW （左下）（の右のドロップダウンリスト）: Query
                        その右の＋ボタン:
                            listPostsBySpecificOwner（左上）:
                                owner: "user_2"
                                sortDirection: ASC
                                items:
                                    owner: チェック
                                    timestamp: チェック
                            listPostsSortedByTimestamp:
                                sortDirection: DESC
                                type: "post"
                                items:
                                    owner: チェック
                                    timestamp: チェック
                        Execute Query ボタン（中央上の▲）:
                        listPostsBySpecificOwner と listPostsSortedByTimestamp の間で順序の違いがあることを確認します:
                        query MyQuery （左上）にマウスを合わせて[×]:
        フロントエンドを作成します。バックエンドを呼び出すコードを追加します:
            参考: AMPLIFY SNS WORKSHOP >> POST機能 FRONT-END
                https://amplify-sns.workshop.aws/ja/30_mock/30_post_front_end.html
            必要な Node パッケージをインストールします:
                npm install --save "@material-ui/core" "@material-ui/icons" "moment" "react-router" "react-router-dom"
            ファイルを置き換えます:
                - ./workshop/30_post_front_end/App.js ファイルを __Project__/src/App.js にコピーします:
                    #// export default withAuthenticator(App ...) と function App() が全体のメインです
                - ./workshop/30_post_front_end/Sidebar.js ファイルを __Project__/src/containers/Sidebar.js にコピーします:
                    #// export default function Sidebar(...) の return が全体のメインです
                    #// const [value, setValue] = React.useState(''); は React Hooks です
                    #// await API.graphql(graphqlOperation(...)) が GraphQL API 呼び出しです
                    #// Auth.signOut() でサインアウトします
                - ./workshop/30_post_front_end/AllPosts.js ファイルを __Project__/src/containers/AllPosts.js にコピーします:
                - ./workshop/30_post_front_end/PostsBySpecifiedUser.js ファイルを __Project__/src/containers/PostsBySpecifiedUser.js にコピーします:
                - ./workshop/30_post_front_end/PostList.js ファイルを __Project__/src/components/PostList.js にコピーします:
                #// useStateを使用して状態管理を行なっているものは __Project__/src/containers、そうでないものは __Project__/src/components に配置しています。
        動作確認をします（フロントエンドはローカル、バックエンドはクラウド）:
            #// バックエンド部分を Amplify Mockingで利用することができないのでフロントとバックをクラウドにデプロイします
            - amplify mock api が動いていたら終了させます:
            #Git bash
            - amplify push  #// バックエンドをクラウドに反映させます。質問にはすべて Yes を入力します
            - (以下は初回のみ入力が必要です):
                Choose the code generation language target: javascript
                Enter the file name pattern of graphql queries, ...: src/graphql/**/*.js  #// そのまま Enter
                Do you want to generate/update all possible GraphQL operations ...: Yes
                Enter maximum statement depth [...]: 3
            #// push（デプロイ）が完了するまで待ちます。約4分かかります
            - npm start
    手動デプロイできるようにしてデプロイします:
        参考: AMPLIFY SNS WORKSHOP >> 手動デプロイ
            https://amplify-sns.workshop.aws/ja/40_hosting/00_manual_deployment.html
        手動デプロイできるように Amplify hosting のカテゴリーを追加します:
            コマンド:
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - amplify add hosting
            Select the plugin module to execute: Hosting with Amplify Console (...)
            Choose a type Manual deployment: Manual deployment
        手動デプロイします:
            コマンド:
                #Git bash
                - amplify publish  #// バックエンドとフロントエンドをクラウドに反映させます
        コミットします:
            #Git bash
            - git add "."
            - git commit -a -m "First deploy"
            - git push
    ステージング環境を追加します:
        参考: AMPLIFY SNS WORKSHOP >> GITHUBと連携してCI/CD環境を構築する(2)
            https://amplify-sns.workshop.aws/ja/70_multi_env/10_amplify_console/create_cicd.html
        コマンド:
            #Git bash
            - amplify env list  #// 環境を一覧表示します
            - amplify status
            - amplify env add
        Do you want to use an existing environment?: No
        Enter a name for the environment: staging
        Do you want to use an AWS profile?: Yes
        Please choose the profile you want to use: amplify-react3  #template: __CLI_Profile__
        コマンド(2):
            #Git bash
            - amplify env list  #// 環境を一覧表示します
            - amplify status    #// 最も下の表の FrontEnd Env の列に staging がまだありません
            - amplify env checkout production  #// 環境を切り替えます
            - amplify env checkout staging
            - amplify push  #// バックエンドだけデプロイします
            - npm start  #// フロントエンドはローカル、バックエンドはクラウドで実行します
                #// cognito は別になので、production 環境で登録したユーザーは staging 環境にいません
        ホスティングを一旦終了します:
            #Git bash
            - amplify env checkout production
            - amplify remove hosting  #// クラウドとの関係が切断されます
            - amplify push
            - amplify env checkout staging
            - amplify status
            - amplify push
            - amplify env checkout production  #// 以上で hosting の設定が削除されたことになります
    Amplify Console + GitHub でフロントエンド＋バックエンドの CI/CD 環境を構築します:
        参考: AMPLIFY SNS WORKSHOP >> GITHUBと連携してCI/CD環境を構築する(2)
            https://amplify-sns.workshop.aws/70_multi_env/10_amplify_console/create_cicd.html
        起動コマンド:
            #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
            - amplify add hosting
        Select the plugin module to execute: Hosting with Amplify Console (...)
        Choose a type: Continuous deployment
        (ブラウザーが開きます):
            Connect a frontend web app: GitHub
            Continue ボタン:
                (aws と GitHub の接続がされていなかったとき):
                    表示されたアカウント名を確認: wants to access your Takakiriy account
                        #template: wants to access your __GitHubCollaboratorAccount__ account
                    Authorize GitCredentialManager ボタン:
            リポジトリブランチの追加:
                リポジトリ: Takakiriy/react3  #template: __GitHubOwnerAccount__/__RepositoryName__
                ブランチ: master  #template: __ProductBranchName__
                次へ ボタン:
            ビルド設定の構成:
                チェック: Deploy updates to backend resources with your frontend on every code commit
                Select a backend evironment: production
                Create new role ボタン:
                    ユースケースの選択:
                        次のステップ ボタン:
                    Attached アクセス権限ポリシー:
                        次のステップ ボタン:
                    タグの追加 (オプション):
                        次のステップ ボタン:
                    確認:
                        ロール名: amplifyconsole-backend-react3  #template: __AmplifyRole__
                        ロールの作成 ボタン:
                    IAM が表示されているブラウザーのタブを閉じます:
                Select an existing service role ...: amplifyconsole-backend-react3  #template: __AmplifyRole__
                    #// ロール名を入力する右にある右回りボタンを押すと選べるようになります
                次へ ボタン:
            確認:
                保存してデプロイ ボタン:
            #// プロビジョン >> ビルド >> デプロイ >> 検証 が完了するまで待ちます（約3分）
            #// https://..（左下）をクリックすると実行します
            #// master（右半分の左上）をクリックするとデプロイのログが表示されます
            #// Amplify Console URL: https://console.aws.amazon.com/amplify/
        Continuous deployment is configured in the Amplify Console...:  #// Enter キーを押します
        (下記のように表示されます。Domaiin 列はバックエンドのURLです): |
            ┌──────────────┬──────────────────────────────────────────────┐
            │ FrontEnd Env │ Domain                                       │
            ├──────────────┼──────────────────────────────────────────────┤
            │ master       │ https://master.d2oudfgbjw0ivu.amplifyapp.com │
            └──────────────┴──────────────────────────────────────────────┘
        コミットすると CI/CD パイプラインが動くことを確認します:
            - たとえば react2/public/index.html の <titie> を変更します
            - git add "."
            - git commit -a -m "Second commit"
            - git push
        （メモ）ホスティング機能を削除するには:
            参考: https://amplify-sns.workshop.aws/ja/70_multi_env/10_amplify_console/create_cicd.html
            Git CMD: amplify remove hosting
            Are you sure you want to delete the resource? ... : y
            Git CMD(2): amplify push
            以下を行ってはいけません:
                ブラウザー: https://console.aws.amazon.com/amplify/ >> （アプリ名） >> アクション >> アプリの削除
    staging 環境（＝develop ブランチ）を構築します:
        参考: AMPLIFY SNS WORKSHOP >> 複雑な開発環境の構築(1)
            https://amplify-sns.workshop.aws/70_multi_env/20_branch_autodetection.html
        develop ブランチを新規作成します:
            - git status  #// clean 状態であること
            - git branch  #// 分岐元が master ブランチであること
            - amplify env add  #// staging 環境が無いときは作ります（上記「amplify env add」参照）
            - git checkout -b "develop"
            - git push --set-upstream origin "develop"
        stating 環境と develop ブランチを紐付けます:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
                (アプリ名) >> Frontend environments (タブ) >> ブランチの接続（右上）
            ブランチ: develop
            Backend environment: staging
            次へ ボタン:
            保存してデプロイ ボタン:
            #// デプロイが完了するまで待ちます
        開発者以外が使えないようにするために、Basic 認証を追加します:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
                (アプリ名) >> アクセスコントロール (左) >> アクセスの管理（右上）
            ブランチ名: develop
            Access setting: 制限-パスワードが必須です
            username: staging  #// 例
            password: 12345aA19FEpQninoAFE83e #template: __StagingPassword__
            Save ボタン:
            #// Web アプリを起動して、Basic 認証してから表示できることをチェックします
    design 環境（バックエンドを他の環境でも共有する環境）（＝design-base ブランチなど）を構築します:
        #// または環境やブランチを階層化します
        design 環境を新規作成します:
            コマンド:
                #Git bash
                - git status  #// clean 状態であること
                - amplify env add
            Do you want to use an existing environment?: No
            Enter a name for the environment: design
            Do you want to use an AWS profile?: Yes
            Please choose the profile you want to use: amplify-react3  #template: __CLI_Profile__
            コマンド(2):
                #Git bash
                - git branch  #// 分岐元が develop ブランチであること
                - amplify push  #// バックエンドをデプロイします
                #// デプロイが完了するまで待ちます
        design-base ブランチ（ダミー）を新規作成してコミットします:
            #// design-baseブランチはAmplify Consoleでdesign環境を認識させるためのダミーブランチです
            #Git bash
            - git add "."
            - git commit -m "add design-base env"
            - git checkout -b "design-base"
            - git push --set-upstream origin "design-base"
        design 環境と design-base ブランチを紐付けます:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
                (アプリ名) >> Frontend environments (タブ) >> ブランチの接続（右上）
            ブランチ: design-base
            Backend environment: design
            次へ ボタン:
            保存してデプロイ ボタン:
            #// デプロイが完了するまで待ちます
            全般（左）>> 編集（右上）:
            Branch autodetection: Enabled
            Branch autodetection - patterms: design/**
            Branch autodetection - backend environment:
                Point all branches to existing environment: design
                #// もし「Create new backend environment for every connected branch」にすると、
                #// ブランチごとに個別のバックエンドを構築します
            Branch autodetection access control: Enabled
            username: design  #// 例
            password: 12345aA19FEpQninoAFE83e #template: __StagingPassword__
            保存 ボタン:
        design/alpha 環境/ブランチと design/beta 環境/ブランチを新規作成してコミット＆デプロイします:
            #Git bash
            - git checkout -b design/alpha
            - git push --set-upstream origin design/alpha
            - git checkout -b design/beta
            - git push --set-upstream origin design/beta
    （不要になったら）環境を１つ削除します:
        メニュー: https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
            （アプリ名）>> アクション（右上）>> アプリ設定を表示 >> （ブランチ）（最も下）>>
            （ブランチを選択） >> アクション >> ブランチの接続解除  #// aws リソースも削除されます
        Amplify Console:
            https://console.aws.amazon.com/amplify/home
        aws リソースの ID 一覧:
            - react2/amplify/backend/amplify-meta.json
        S3, DynamoDB, Lambda, CloudFormation:
            URL: https://ap-northeast-1.console.aws.amazon.com/resource-groups/
            Tag Editor:
                リソースタイプ: サポートされるすべてのリソースタイプ
                タグ - オプション: user:Application
                オプションのタグ値: react2
        GraphQL:
            https://ap-northeast-1.console.aws.amazon.com/appsync/
        Cognito:
            https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                react100005678_userpool_00005678-production >> ユーザーとグループ（左上）
    GraphQL のスキーマに新しい型を追加します:
        参考: AMPLIFY SNS WORKSHOP >> FOLLOW/TIMELINE機能の実装
            https://amplify-sns.workshop.aws/50_follow_timeline.html
        FollowRelationship 型を react3/amplify/backend/api/api1/schema.graphql の末尾に追加します: |  #template: __RepositoryName__
            type FollowRelationship
                @model
                @auth(rules: [
                    {allow: owner, ownerField:"followerId", provider: userPools, operations:[read, create]},
                    {allow: private, provider: userPools, operations:[read]}
                ])
                @key(fields: ["followeeId", "followerId"])
            {
                followeeId: ID!
                followerId: ID!
                timestamp: AWSTimestamp!
            }
        （必要なら）上記「amplify mock api」で FollowRelationship 型の内容を確認します:
            Mutation(POST):
                ADD NEW （左下）（の右のドロップダウンリスト）: Mutation
                その右の＋ボタン:
                    Update Auth ボタン:
                        Username: test_follower
                        Genereate Token ボタン:
                    createFollowRelationship（左上）:
                        input*:
                            followeeId*: "test_followee"
                            followerId*: "test_follower"
                            timestamp*: 1585299648
                        followeeId: チェック
                        followerId: チェック
                        timestamp: チェック
                        # 中央列の timestamp: "1585222654" を timestamp: 1585222654 に置き換えます:
                        #// Amplify GraphQL Explorer が AWSTimestamp型に対応していないため
                        Execute Query ボタン（中央上の▲）:
                        query MyMutation （左上）にマウスを合わせて[×]:
        フロントエンドを作成します。バックエンドを呼び出すコードを追加します:
            参考: AMPLIFY SNS WORKSHOP >> FOLLOW機能：FRONT-END
                https://amplify-sns.workshop.aws/50_follow_timeline/10_follow_front_end.html
            フロントエンドに API 呼び出しのコードを追加します:
                - ./workshop/50_follow_timeline/PostsBySpecifiedUser.js ファイルを __Project__/src/containers/PostsBySpecifiedUser.js にコピーします:
                    #// ./workshop/50_follow_timeline/PostsBySpecifiedUser.js ファイルと
                    #// ./workshop/30_post_front_end/PostsBySpecifiedUser.js ファイルを比較すると
                    #// 追加に必要なコードが分かります
                    #// useEffect()でログイン中のユーザー情報を取得しています
            ローカルで動作確認をします:
                - amplify mock api
                - npm start  #// amplify mock を実行中のシェルとは別のシェルで実行します
    IAM 認証を追加します（Lambda を実行するため）:
        IAM 認証を追加します:
            起動コマンド:
                - amplify update api
            Please select from one of the below mentioned services: GraphQL
            Select from the options below: Update auth settings
            Choose the default authorization type for the API: Amazon Cognito User Pool
            Configure additional auth types?: Yes
            Choose the additional authorization types you want to configure for the API: [IAM]
        Timeline 型を react3/amplify/backend/api/api1/schema.graphql の末尾に追加します: |  #template: __RepositoryName__
            type Timeline 
                @model
                @auth(rules: [
                {allow: owner, ownerField: "userId", provider: userPools, operations:[read, create]},
                {allow: private, provider: iam ,operations:[create]},
                ])
                @key(fields: ["userId", "timestamp"])
            {
                userId: ID!
                timestamp: AWSTimestamp!
                postId: ID!
                post: Post @connection(fields: ["postId"])
            }
        IAM 認証が必要な Mutation の動作確認をします:
            #// 下記 createTimeline が User Pool 認証ではなく IAM 認証を必要とします
            #// GraphiQL の右上にある Use：User Pool ボタンを Use：IAM に変更する必要があります
            Git bash:
                - amplify mock api
                - npm start  #// amplify mock を実行中のシェルとは別のシェルで実行します
            表示された GraphiQL の URL をブラウザーで開きます:
                Query(GET):
                    ADD NEW （左下）（の右のドロップダウンリスト）: Query
                    その右の＋ボタン:
                        listPosts（左上）:
                            items:
                                id: チェック
                                owner: チェック
                                timestamp: チェック
                    Use：～（右上）が Use：User Pool でなかったらそれに変更します:
                    Execute Query ボタン（中央上の▲）:
                    query MyQuery （左上）にマウスを合わせて[×]:
                Mutation(POST):
                    ADD NEW （左下）（の右のドロップダウンリスト）: Mutation
                    その右の＋ボタン:
                        createTimeline（左上）:
                            input*:
                                postId*: "____"   #// 上記 items.id
                                timestamp*: ____  #// 上記 items.timestamp
                                userId*: "test_follower"
                            postId: チェック
                            timestamp: チェック
                            userId: チェック
                    #// 中央列の timestamp: "____" を timestamp: ____ に置き換えます:
                    #// Amplify GraphQL Explorer が AWSTimestamp型に対応していないため
                    Use：～（右上）が Use：IAM でなかったらそれに変更します:
                    Execute Query ボタン（中央上の▲）:
                    query MyMutation （左上）にマウスを合わせて[×]:
                終了:
                    #// 終了するとローカル DB の内容が消えます
                    - ブラウザーを閉じます:
                    - amplify mock api を実行した bash で Ctrl + C を押します:
    関数を追加します:
        参考: AMPLIFY SNS WORKSHOP >> TIMELINE機能 ＠FUNCTION
            https://amplify-sns.workshop.aws/50_follow_timeline/30_function_directive.html
        関数カテゴリーを追加します:
            起動コマンド:
                - amplify add function
            Select which capability you want to add: Lambda function
            Provide a friendly name for your resource to be used as ...: createPostAndTimeline
            Provide the AWS Lambda function name: createPostAndTimeline
            Choose the runtime that you want to use: NodeJS
            Choose the function template that you want to use: Hello World
            Do you want to access other resources created in this project from your Lambda function?: Yes
            Select the category: [api]
            Select the operations you want to permit ...: [create, read]
            Do you want to invoke this function on a recurring schedule?: n
            Do you want to configure Lambda layers for this function?: n
            Do you want to edit the local lambda function now?: n
        Mutation 型を react3/amplify/backend/api/api1/schema.graphql の末尾に追加します: |  #template: __RepositoryName__
            type Mutation
            {
                createPostAndTimeline(
                        content: String!
                    ): Post
                    @function(name: "createPostAndTimeline-${env}")
                    @auth(rules: [
                        {allow: private, provider: userPools},
                    ])
            }
        #// @function が Lambda リゾルバーです
        UserPools 認証の他に IAM 認証も必要とする type の @auth に provider：iam の行を追加します:
            修正前: |
                {allow: private, provider: userPools, operations:[read]},
            修正後: |
                {allow: private, provider: userPools, operations:[read]},
                {allow: private, provider: iam ,operations:[create]},
        関数の定義が入ったファイルをコピーします:
            - /workshop/50_follow_timeline/index.js ファイルを
                react2/amplify/backend/function/createPostAndTimeline/src/index.js にコピーします
        関数が使うライブラリをインストールします:
            #Git bash
            - cd react2/amplify/backend/function/createPostAndTimeline/src
            - npm install --save "aws-appsync" "graphql-tag" "node-fetch"
            #// 現時点でAmplifyのJavaScriptライブラリはNode.jsランタイムで動作しないため、AWS Lambda関数からAWS AppSyncを呼び出す際にはAWS AppSync SDKを利用します
        Amplify Mocking を実行するためにファイルを修正します:
            amplify\backend\function\createPostAndTimeline\function-parameters.json : |
                {
                        :
                    "apiBoyakiGqlGraphQLAPIIdOutput": "",
                    "apiBoyakiGqlGraphQLAPIEndpointOutput": ""
                }
        amplify mock api を再起動します:
            - (Ctrl + C)
            - amplify mock api
        GraphiQL のタブをリロードします:
            Mutation(POST):
                ADD NEW （左下）（の右のドロップダウンリスト）: Mutation
                その右の＋ボタン:
                    createPostAndTimeline（左上）:




                        input*:
                            postId*: "____"   #// 上記 items.id
                            timestamp*: ____  #// 上記 items.timestamp
                            userId*: "test_follower"
                        postId: チェック
                        timestamp: チェック
                        userId: チェック
                #// 中央列の timestamp: "____" を timestamp: ____ に置き換えます:
                #// Amplify GraphQL Explorer が AWSTimestamp型に対応していないため
                Use：～（右上）が Use：IAM でなかったらそれに変更します:
                Execute Query ボタン（中央上の▲）:
                query MyMutation （左上）にマウスを合わせて[×]:
            Query(GET):
                ADD NEW （左下）（の右のドロップダウンリスト）: Query
                その右の＋ボタン:
                    listPosts（左上）:
                        items:
                            id: チェック
                            owner: チェック
                            timestamp: チェック
                Use：～（右上）が Use：User Pool でなかったらそれに変更します:
                Execute Query ボタン（中央上の▲）:
                query MyQuery （左上）にマウスを合わせて[×]:
            終了:
                #// 終了するとローカル DB の内容が消えます
                - ブラウザーを閉じます:
                - amplify mock api を実行した bash で Ctrl + C を押します:
    トラブルシューティング:
        メモ: |
            https://ap-northeast-1.console.aws.amazon.com/appsync/
            https://ap-northeast-1.console.aws.amazon.com/cloudwatch/home
            amplify mock api

            AppSync の ログ を有効化した
            https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/monitoring.html
        プロジェクトを git clone したあと、npm コマンドが使えなくなる:
            対策:
                #Git bash  (Git CMD では git clone ができません)
                - git clone ....
                - npm ci
        プロジェクトを git clone したあと、Amplify CLI が使えなくなる:
            対策:
                #Git bash  (Git CMD では git clone ができません)
                - git clone ....
                #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
                - amplify pull
        プロジェクトを git clone したあと、バックエンドが呼び出せなくなる:
            メッセージ: |
                Unhandled Rejection (Error): Connection handshake error
            解説:
                バックエンドとの通信をクラウドからローカルに変更した設定において（amplify mock ... を呼び出した後で）、
                ローカルのバックエンドが動作していないときに発生します
            対策:
                - amplify push または amplify publish
    リソースのクリーンアップ:
        #// 以下は amplify delete コマンドを使ってクリーンする場合です
        aws のリージョンを選択します:
            AWS マネジメント コンソールにサインインします:
                URL: https://console.aws.amazon.com/
                （ユーザー）: IAM ユーザー
                アカウントID: 123456789012  #template: __AWS_AccountID__
                次へ ボタン:
                ユーザー名: user1  #template: __AWS_UserName__
                パスワード: __AWS_UserPassword__
                サインイン ボタン:
            リージョン: 東京 （右上） #template: __RegionName__
            OK: ブラウザーを閉じます
        Amplify Console の削除:
            #Git bash
            - amplify delete
                #// メモ: amplify remove hosting コマンドを実行すると hosting 機能だけが削除されます
            - bash を閉じます:
        CloudFormation の stack の削除:
            - https://ap-northeast-1.console.aws.amazon.com/cloudformation/home >> ネストの表示をオフ >>
                amplify-react3-design-...
                    #template: amplify-__RepositoryName__-design-...
        Cognito ユーザープールの削除:
            - https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                react312345678_userpool_12345678-design
                    #template: __RepositoryName__12345678_userpool_12345678-design
                    #// 12345678 はハッシュ値です。末尾の design は環境名です
            - プールの削除（右上）
        IAM の削除:
            - https://console.aws.amazon.com/iam/ >> ユーザー:
                - user-react3-amplify の左にチェック >> ユーザーの削除
                    #template: __AmplifyUser__
            - https://console.aws.amazon.com/iam/ >> ロール:
                - 作成時刻でソート
                - amplifyconsole-backend-role の左にチェック >> ロールの削除
                - 環境名で検索すると6つぐらい見つかります。作成日時を見ながら削除してください
            - https://console.aws.amazon.com/iam/ >> グループ:
                - Developers の左にチェック >> グループのアクション >> （必要なら）グループの削除
        Amplify との接続を解除するように GitHub を設定します:
            メニュー: https://github.com/ >> （ Takakiriy のプロフィール写真） >> Settings >> Applications（左下）
                #template: （ __GitHubOwnerAccount__ のプロフィール写真）
            Installed GitHub Apps （タブ）:
                - (AWS Connector for GitHub) >> Configure
                - (Uninstall "AWS Connector for GitHub")（最も下）>> Uninstall
            Authorized OAuth Apps （タブ）:
                - (Git Credential Manager) >> … >> Revoke >> I understand, revoke access
            ブラウザーを閉じます:
        （必要なら）GitHub のリポジトリを削除します:
            - https://github.com/ >> （左上の GitHub アイコン） >> Takakiriy/react3
                #template: __GitHubOwnerAccount__/__RepositoryName__
            - Settings（タブ。ウィンドウ幅が狭いときは … の中にある） >> （いちばん下へスクロール） >>
                Delete this repository >> Takakiriy/react3
                    #template: __GitHubOwnerAccount__/__RepositoryName__
    メモ:
        デプロイの状況:
        AWS CLI をインストールしてセットアップします:
            参考: Windows での AWS CLI バージョン 2 のインストール、更新、アンインストール
                https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-windows.html
            AWS CLI をインストールします:
                - https://awscli.amazonaws.com/AWSCLIV2.msi
                - インストール オプションはデフォルトを使用
                #Git bash
                - aws --version  #// aws-cli/2.0.59 Python/3.7.7 Windows/10 exe/AMD64
        REST API（Amplify API）を追加します:
            #Git CMD  (Git bash では設定ができません。Windows キー + Git CMD + クリック)
            - cd  "react3"  #template: "__RepositoryName__"
            - amplify add api
            - (Amplify の設定内容):
                Please select from one of the below mentioned services: REST
                Provide a friendly name for your resource to be used as a label for this category in the project: api1
                    #// API ゲートウェイのリソース名になります（未確認）
                Provide a path (e.g., /book/{isbn}): /items  #// そのまま Enter
                Choose a Lambda source: Create a new Lambda function
                Provide a friendly name for your resource to be used as a label for this category in the project(2): ItemsGet
                    #// path に対応する関数の名前
                Provide the AWS Lambda function name: ItemsGet  #// そのまま Enter
                Choose the runtime that you want to use: NodeJS  #// そのまま Enter
                Choose the function template that you want to use: CRUD function for DynamoDB
                Choose a DynamoDB data source option: Create a new DynamoDB table
                Provide a friendly name for your resource to be used as a label for this category in the project(3): items1
                Please provide table name: items1  #// そのまま Enter
                What would you like to name this column: id
                Please choose the data type: string  #// そのまま Enter
                Would you like to add another column?: n (No)
                Please choose partition key for the table: id  #// そのまま Enter
                Do you want to add a sort key to your table?: n (No)
                Do you want to add global secondary indexes to your table?: n (No)
                Do you want to add a Lambda Trigger for your Table?: N (no)
                Do you want to access other resources in this project from your Lambda function?: n (No)
                Do you want to invoke this function on a recurring schedule?: N (No)
                Do you want to configure Lambda layers for this function?: N (No)
                Do you want to edit the local lambda function now?: n (No)
                Restrict API access: Y (Yes)
                Who should have access?: Authenticated users only
                What kind of access do you want for Authenticated users?: [create, read, upate, delete]
                Do you want to add another path?: N (No)

aws 公式：サーバーレスのウェブアプリケーションを構築します:
    #// AWS Lambda、Amazon API Gateway、AWS Amplify、Amazon DynamoDB、Amazon Cognito、GitHub を使用
    参考: https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/
    設定: #settings:
        __AWS_AccountID__: 123456789012  #★秘密:仮
        __AWS_UserName__: user1
        __RegionName__: 東京  #// CodePipeline のパイプラインを作成するリージョンの名前
        __RegionID__: ap-northeast-1  #// __RegionName__ の ID
        __IAM_UserName__: user-dev1  #// IAM ユーザー（開発者用）、AWS CLI で必要な権限を持つ
        __IAM_UserAccessKeyID__: AKIAZQ2CH423P67RPDNA  #// 手順内でメモする値
        __SecretAccessKey__: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #★秘密:仮  #// 手順内でメモする値
        __GitHubOwnerAccount__: Takakiriy  #// リポジトリのオーナーのアカウント名
        __GitHubCollaboratorAccount__: Takakiriy  #// リポジトリにアクセスするユーザーのアカウント名
        __GitCollaboratorName__: Your Name        #// git log コマンドで表示されるユーザー名
        __GitCollaboratorMail__: you@example.com  #// git log コマンドで表示されるメールアドレス
        __Domain__: sage-p.tk  #// 作成するアプリケーションの URL のドメイン部分
        __AppNamePascalCase__: WildRydes
        __RepositoryName__: wildrydes-site  #// アプリケーション名
        __ProductBranchName__: master  #// 本番用のブランチ名
        __Stage__: prod
        __CognitoPoolID__: ap-northeast-1_kCQxkqzUf  #// 手順内でメモする値
        __AppClientID__: 53cldntes2imnc2ohb6n86m77q
        __AppUserMail__: example@example.com  #★秘密:仮
        __AppUserPassword__: 12345aA!
        __API_GatewayURL__: https://abcdrsnmud.execute-api.ap-northeast-1.amazonaws.com/prod  #★秘密:仮
    Amplify Console + GitHub でフロントエンドの CI/CD 環境を構築します:
        参考: 継続的デプロイを使用した静的ウェブホスティング
            https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-1/
        ローカルPCへ各種ソフトウェアをインストールします:
            Git for Windows をインストールします:
                - https://git-scm.com/ >> Downloads >> Windows
                - ダウンロードしたファイル（例：Git-2.24.1.2-64-bit.exe）を開く
                - Next を8回押す
                - Configuring the line ending conversions: Checkout as-is, commit as-is
                - 他のインストール オプションはデフォルトを使用
                - デスクトップを右クリック >> Git Bash Here
                - git clone  "https://github.com/githubtraining/hellogitworld.git"
                - 成功したら、デスクトップにある hellogitworld フォルダーを削除します ( rm -rf hellogitworld )
            （ダウンロード（クローン）するリポジトリにコミットする可能性があるとき）Git のユーザー名を設定します:
                - git config --global user.email "you@example.com"  #template: "__GitCollaboratorMail__"
                - git config --global user.name  "Your Name"        #template: "__GitCollaboratorName__"
            Git bash を閉じます:
        aws のアカウントを作成します:
        aws のリージョンを選択します:
            AWS マネジメント コンソールにサインインします:
                URL: https://console.aws.amazon.com/
                （ユーザー）: IAM ユーザー
                アカウントID: 123456789012  #template: __AWS_AccountID__
                次へ ボタン:
                ユーザー名: user1  #template: __AWS_UserName__
                パスワード: __AWS_UserPassword__
                サインイン ボタン:
            リージョン: 東京 （右上） #template: __RegionName__
            OK: ブラウザーを閉じます
        AWS CLI をインストールしてセットアップします:
            参考: Windows での AWS CLI バージョン 2 のインストール、更新、アンインストール
                https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-windows.html
            AWS CLI をインストールします:
                - https://awscli.amazonaws.com/AWSCLIV2.msi
                - インストール オプションはデフォルトを使用
                #Git bash
                - aws --version  #// aws-cli/2.0.58 Python/3.7.7 Windows/10 exe/AMD64
            IAM ユーザー（開発者用）がなければ作成します:
                Developers グループがなければ作成します:
                    #// ユーザーの権限はグループで定義します
                    メニュー: https://console.aws.amazon.com/iam/ >> グループ >> 新しいグループの作成
                    グループ名: Developers
                    次のステップ ボタン:
                    選択するポリシー:
                        - AWSLambdaFullAccess
                        - AmazonAPIGatewayAdministrator
                        - AmazonDynamoDBFullAccess
                        - AmazonCognitoPowerUser
                        #// 上記は暫定です
                        #// 後でアクセスできるリソースを制限します
                    次のステップ ボタン(2):
                    グループの作成 ボタン:
                IAM ユーザー（開発者用）を作成します:
                    メニュー: https://console.aws.amazon.com/iam/ >> ユーザー >> ユーザーを追加
                    ユーザー名: user-dev1  #template: __IAM_UserName__
                    アクセスの種類:
                        チェック:
                            プログラムによるアクセス
                        チェックしない:
                            AWS マネジメントコンソールへのアクセス:
                        次のステップ ボタン:
                    ユーザーをグループに追加:
                        選択するグループ:
                            - Developers
                        次のステップ ボタン:
                    タグの追加:
                        次のステップ ボタン:
                    確認:
                        ユーザーの作成 ボタン:
                    アクセスキーをメモします:
                        アクセスキー ID: AKIAZQ2CH423P67RPDNA  #template: __IAM_UserAccessKeyID__
                        シークレットアクセスキー: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __SecretAccessKey__
                        閉じる ボタン（右下）:
            定期的にアクセスキーを更新します:
                https://console.aws.amazon.com/iam/ >> ユーザー >> (ユーザー名) >> 認証情報（タブ） >>
                    アクセスキーの作成 ボタン
            AWS CLI と IAM ユーザーを結びつけます（ローカルPCにアクセスキーを設定します）:
                #Git bash
                - aws configure:
                    AWS Access Key ID [None]: AKIAZQ2CH423P67RPDNA  #template: __IAM_UserAccessKeyID__
                    AWS Secret Access Key [None]: kOn3A8FHo30F8qwofeAAAAJpoWpPwfOkaDSR_QFq  #template: __SecretAccessKey__
                    Default region name [None]: ap-northeast-1   #template: __RegionID__
                    Default output format [None]: （なし）
                #// この設定によって、~/.aws/config と ~/.aws/credentials ファイルが作られます
                #// Windows では ~ や ${HOME} の値は %USERPROFILE% 環境変数の値と同じです
                #// ~/.aws/credentials ファイルにシークレットキーが保存されるので注意してください
            AWS CLI がセットアップできたかどうかを確認します:
                #Git bash
                - aws s3 ls  #// エラーにならないこと (Unable to locate credentials エラー) 
        Git リポジトリを作成します:
            #// 下記は GitHub を使う場合です
            #// チュートリアルでは、 wildrydes-site #template: __RepositoryName__
            GitHub のアカウントを作成します:
            GitHub にサインインします:
                メニュー: https://github.com/ >> 三（右上） >> Sign in
                Username or email address: Takakiriy  #template: __GitHubCollaboratorAccount__
                Password: ____
                Sign in ボタン:
                ブラウザーを閉じます:
            GitHub にリポジトリを新規作成します:
                リポジトリを作成します:
                    メニュー: https://github.com/ >> （左上の GitHub アイコン） >> （Repositories）New
                    Repository name: wildrydes-site  #template: __RepositoryName__
                    Public or Private: Private
                    Create repository ボタン:
                    ブラウザーを閉じます:
                プライベート リポジトリに接続してダウンロード（クローン）します:
                    #Git bash:
                    - cd  "__ParentOfProject__"
                    - git clone "https://github.com/Takakiriy/wildrydes-site.git"  #template: https://github.com/__GitHubOwnerAccount__/__RepositoryName__.git
                        #// ここでエラーになるときは Git をアンインストール＆インストールしてください
                    - Sign in with your browser ボタン  #// プライベート リポジトリのときだけこのボタンが表示されます
                    - 表示されたアカウント名を確認: wants to access your Takakiriy account
                        #template: wants to access your __GitHubCollaboratorAccount__ account
                    - Authorize GitCredentialManager ボタン
                    - 成功したらブラウザーを閉じます:
        Git リポジトリにアプリケーションをコミットします（Git リポジトリを事前設定します）:
            #Git bash
            - cd  "wildrydes-site"  #template: "__RepositoryName__"
            - aws s3 cp "s3://wildrydes-us-east-1/WebApplication/1_StaticWebHosting/website"  "./"  --recursive
            - git add "."
            - git commit -a -m "First commit"
            - git push
        AWS Amplify Console で CD/CI 環境を構築します（AWS Amplify コンソールでウェブホスティングを有効にします）:
            メニュー: https://console.aws.amazon.com/amplify/home >> (Deploy) >> GET STARTED
            From your existing code: GitHub
            Continue ボタン:
            表示されたアカウント名を確認: wants to access your Takakiriy account
                #template: wants to access your __GitHubCollaboratorAccount__ account
            Authorize GitCredentialManager ボタン:
            リポジトリ: Takakiriy/wildrydes-site  #template: __GitHubOwnerAccount__/__RepositoryName__
            ブランチ: master  #template: __ProductBranchName__
            次へ ボタン:
            次へ ボタン(2):  #// ビルドの設定はそのまま
            保存してデプロイ ボタン:
            #// プロビジョン >> ビルド >> デプロイ >> 検証 が完了するまで待ちます（約2分）
            #// https://..（左下）をクリックすると実行します
            #// master（右半分の左上）をクリックするとデプロイのログが表示されます
            #// Amplify Console URL: https://console.aws.amazon.com/amplify/
            #// ただし、まだフロントエンドしか動いていません
        Git リポジトリをコミットして自動的にデプロイされることを確認します:
            たとえば index.html を編集してタイトルバーに表示される内容を変更します: |
                <title>Wild Rydes - Rydes of the Future!</title>
            コミットします:
                #Git bash
                - cd  "wildrydes-site"  #template: "__RepositoryName__"
                - git add "."
                - git commit -a -m "Second commit"
                - git push
            自動デプロイされた結果を確認します:
                メニュー: https://console.aws.amazon.com/amplify/home >> wildrydes-site  #template: __RepositoryName__
    ユーザー認証機能を追加します:
        参考: ユーザー管理
            https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-2/
        Amazon Cognito ユーザープールを作成します:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                ユーザープールを作成する
            プール名: prod-wildrydes-site  #template: __Stage__-__RepositoryName__
            ユーザープールをどのように作成しますか?: デフォルトを確認する
            プールの作成 ボタン:
            プール ID をメモします: ap-northeast-1_kCQxkqzUf  #template: __CognitoPoolID__
        ユーザープールにアプリクライアントを追加します:
            メニュー: https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                prod-wildrydes-site >> アプリクライアント（左） >> アプリクライアントの追加
                    #template: __Stage__-__RepositoryName__ >> アプリクライアント
            アプリクライアント名: WildRydesWebApp  #template: __AppNamePascalCase__WebApp
            チェックしない:
                クライアントシークレットを生成:
            アプリクライアントの作成 ボタン:
            アプリクライアント ID をメモします: 53cldntes2imnc2ohb6n86m77q  #template: __AppClientID__
        アプリケーションに Cognito の各種 ID を設定します（ウェブサイトの設定を更新する）:
            wildrydes-site/js/config.js を編集します: |  #template: __RepositoryName__/js/config.js
                userPoolId: 'ap-northeast-1_kCQxkqzUf',          #template: '__CognitoPoolID__'
                userPoolClientId: '53cldntes2imnc2ohb6n86m77q',  #template: '__AppClientID__'
                region: 'ap-northeast-1'                         #template: '__RegionID__'
            コミットします:
                #Git bash
                - cd  "wildrydes-site"  #template: "__RepositoryName__"
                - git add "."
                - git commit -a -m "Set Cognito related ID"
                - git push
            デプロイが完了するまで待ちます:
                メニュー: https://console.aws.amazon.com/amplify/home >> wildrydes-site  #template: __RepositoryName__
        デプロイされた結果を確認します（実装を検証する）:
            起動: https://..（左下）をクリック（Webアプリが開きます）
            GIDDY UP!（サイン アップ ボタン）:
                Email: example@example.com  #template: __AppUserMail__
                Password: 12345aA!          #template: __AppUserPassword__
                Confirm Password: 12345aA!  #template: __AppUserPassword__
                LET'S RYDE ボタン:
            #// 注意: 本番はユーザープールを設定して Amazon SES で自分が所有するドメインから E メールを送信すること
            #// http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-ses-authorization-to-send-email
            登録したメールアドレスに届いた確認コード（6桁の数字）をユーザーが入力する場合:
                Email: example@example.com  #template: __AppUserMail__
                Verification Code: ____  #// 6桁の数字
                VERIFY ボタン:
                #// Successfully Authenticated! と表示されたらサインイン成功です
                #// API はまだ呼べません、と表示されます
            社内の人が Cognito のページでユーザー登録を承認する場合:
                メニュー: https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                    prod-wildrydes-site >> ユーザーとグループ >> （登録するユーザー名） >> ユーザーの確認
                        #template: __Stage__-__RepositoryName__ >> ユーザーとグループ
            すでに登録済みで、サインインする場合:
                URL: https://____.amplifyapp.com/index.html
                SIGN IN ボタン:
    バックエンドを構築します:
        参考: サーバーレス サービス バックエンド
            https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-3/
        DynamoDB テーブルを作成します:
            メニュー: https://console.aws.amazon.com/dynamodb/ >> テーブルの作成
            テーブル名: Rides
            パーティションキー: RideId
            作成 ボタン:
            ARN（最も下）をメモします: arn:aws:dynamodb:ap-northeast-1:123456789012:table/Rides
                #template: arn:aws:dynamodb:__RegionID__:__AWS_AccountID__:table/Rides
        Lambda 関数の IAM ロールを作成します:
            ロールを作成します:
                メニュー: https://console.aws.amazon.com/iam/ >> ロール >> ロールの作成
                信頼されたエンティティの種類を選択: AWS サービス
                ユースケースの選択: Lambda  #// 信頼ポリシー
                次のステップ ボタン:
                ポリシー（を検索してチェックを入れる）:
                    - AWSLambdaBasicExecutionRole
                次のステップ ボタン(2):
                次のステップ ボタン(3):
                ロール名: WildRydesLambda  #template: __AppNamePascalCase__Lambda
                ロールの作成 ボタン:
            WildRydesLambda:  #// 検索して左のロール名をクリックします  #template: __AppNamePascalCase__Lambda
                メニュー: （アクセス許可）（タブ） >> インラインポリシーを追加
                サービス:
                    サービスの選択 をクリック:
                    クリック: DynamoDB
                アクションの追加:
                    アクションの指定: PutItem
                    追加 ボタン:
                リソース:
                    ARN の追加:
                        Region: ap-northeast-1  #template: __RegionID__
                        Account: 123456789012   #template: __AWS_AccountID__
                        Table name: Rides
                        追加 ボタン:
                ポリシーの確認 ボタン:
                名前: DynamoDBWriteAccess
                ポリシーの作成 ボタン:
        Lambda 関数の作成:
            メニュー: https://console.aws.amazon.com/lambda/
            関数の作成（右上）:
                選択: 一から作成
                関数名: RequestUnicorn
                ランタイム: Node.js 12.x  #// 最新バージョン
                デフォルトの実行ロールの変更:
                    チェック: 既存のロールを使用する
                    既存のロール: WildRydesLambda  #template: __AppNamePascalCase__Lambda
                関数の作成 ボタン:
            関数コード:
                index.js: |
                    const randomBytes = require('crypto').randomBytes;

                    const AWS = require('aws-sdk');

                    const ddb = new AWS.DynamoDB.DocumentClient();

                    const fleet = [
                        {
                            Name: 'Bucephalus',
                            Color: 'Golden',
                            Gender: 'Male',
                        },
                        {
                            Name: 'Shadowfax',
                            Color: 'White',
                            Gender: 'Male',
                        },
                        {
                            Name: 'Rocinante',
                            Color: 'Yellow',
                            Gender: 'Female',
                        },
                    ];

                    exports.handler = (event, context, callback) => {
                        if (!event.requestContext.authorizer) {
                        errorResponse('Authorization not configured', context.awsRequestId, callback);
                        return;
                        }

                        const rideId = toUrlString(randomBytes(16));
                        console.log('Received event (', rideId, '): ', event);

                        // Because we're using a Cognito User Pools authorizer, all of the claims
                        // included in the authentication token are provided in the request context.
                        // This includes the username as well as other attributes.
                        const username = event.requestContext.authorizer.claims['cognito:username'];

                        // The body field of the event in a proxy integration is a raw string.
                        // In order to extract meaningful values, we need to first parse this string
                        // into an object. A more robust implementation might inspect the Content-Type
                        // header first and use a different parsing strategy based on that value.
                        const requestBody = JSON.parse(event.body);

                        const pickupLocation = requestBody.PickupLocation;

                        const unicorn = findUnicorn(pickupLocation);

                        recordRide(rideId, username, unicorn).then(() => {
                            // You can use the callback function to provide a return value from your Node.js
                            // Lambda functions. The first parameter is used for failed invocations. The
                            // second parameter specifies the result data of the invocation.

                            // Because this Lambda function is called by an API Gateway proxy integration
                            // the result object must use the following structure.
                            callback(null, {
                                statusCode: 201,
                                body: JSON.stringify({
                                    RideId: rideId,
                                    Unicorn: unicorn,
                                    Eta: '30 seconds',
                                    Rider: username,
                                }),
                                headers: {
                                    'Access-Control-Allow-Origin': '*',
                                },
                            });
                        }).catch((err) => {
                            console.error(err);

                            // If there is an error during processing, catch it and return
                            // from the Lambda function successfully. Specify a 500 HTTP status
                            // code and provide an error message in the body. This will provide a
                            // more meaningful error response to the end client.
                            errorResponse(err.message, context.awsRequestId, callback)
                        });
                    };

                    // This is where you would implement logic to find the optimal unicorn for
                    // this ride (possibly invoking another Lambda function as a microservice.)
                    // For simplicity, we'll just pick a unicorn at random.
                    function findUnicorn(pickupLocation) {
                        console.log('Finding unicorn for ', pickupLocation.Latitude, ', ', pickupLocation.Longitude);
                        return fleet[Math.floor(Math.random() * fleet.length)];
                    }

                    function recordRide(rideId, username, unicorn) {
                        return ddb.put({
                            TableName: 'Rides',
                            Item: {
                                RideId: rideId,
                                User: username,
                                Unicorn: unicorn,
                                RequestTime: new Date().toISOString(),
                            },
                        }).promise();
                    }

                    function toUrlString(buffer) {
                        return buffer.toString('base64')
                            .replace(/\+/g, '-')
                            .replace(/\//g, '_')
                            .replace(/=/g, '');
                    }

                    function errorResponse(errorMessage, awsRequestId, callback) {
                    callback(null, {
                        statusCode: 500,
                        body: JSON.stringify({
                        Error: errorMessage,
                        Reference: awsRequestId,
                        }),
                        headers: {
                        'Access-Control-Allow-Origin': '*',
                        },
                    });
                    }
                保存します:
                    File >> Save メニュー:
        関数をテストします:
            メニュー: テストイベントの選択 >> テストイベントの設定
            イベント名: TestRequestEvent
            （テストイベント）: |
                {
                    "path": "/ride",
                    "httpMethod": "POST",
                    "headers": {
                        "Accept": "*/*",
                        "Authorization": "eyJraWQiOiJLTzRVMWZs",
                        "content-type": "application/json; charset=UTF-8"
                    },
                    "queryStringParameters": null,
                    "pathParameters": null,
                    "requestContext": {
                        "authorizer": {
                            "claims": {
                                "cognito:username": "the_username"
                            }
                        }
                    },
                    "body": "{\"PickupLocation\":{\"Latitude\":47.6174755835663,\"Longitude\":-122.28837066650185}}"
                }
            作成 ボタン:
            テスト ボタン（右上）:
            成功したことを確認します: |
                "statusCode": 200,
    RESTful API:
        参考: RESTful API
            https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-4/
        新しい REST API を作成します:
            メニュー: https://console.aws.amazon.com/apigateway/ >> API を作成 >> REST API >> 構築 >> 新しい API
            API 名: WildRydes  #template: __AppNamePascalCase__
            エンドポイントタイプ: エッジ最適化
            API の作成 ボタン:
        Cognito ユーザプールオーソライザーを作成します:
            メニュー: https://console.aws.amazon.com/apigateway/ >>
                WildRydes >> オーソライザー >> 新しいオーソライザーの作成  #template: __AppNamePascalCase__
            名前: WildRydes  #template: __AppNamePascalCase__
            タイプ: Cognito
            Cognito ユーザープール: prod-wildrydes-site  #template: __Stage__-__RepositoryName__
            トークンのソース: Authorization
            作成:
        認証トークンをコピーします:
            AWS Amplify Console から Web アプリケーションを開き、https://____.amplifyapp.com/ride.html
                にアクセスすると、認証トークンが表示されます
        認証トークンをテストします:
            - オーソライザーのページに戻って、テストをクリックして認証トークンを「認可トークン」に貼り付けます
            - テスト ボタン
            - 要求（クレーム）に下記のように表示されます: |
                {
                    "aud": "53cldntes2iinc2ohb6n86m77q",
                    "auth_time": "1603373909",
                    "cognito:username": "example2-at-sage-p.com",
                    "email": "example2@sage-p.com",
                    "email_verified": "false",
                    "event_id": "798e35c4-fc10-4d20-87fa-d700158c97ac",
                    "exp": "Thu Oct 22 17:19:16 UTC 2020",
                    "iat": "Thu Oct 22 16:19:16 UTC 2020",
                    "iss": "https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_kCQxkqzUf",
                    "sub": "beb51df0-382f-4c8e-86f0-11aca1d4b80d",
                    "token_use": "id"
                }
        新しいリソースとメソッドを作成します:
            メニュー: https://console.aws.amazon.com/apigateway/ >>
                WildRydes >> リソース >> アクション >> リソースの作成  #template: __AppNamePascalCase__
            リソース名: ride
            チェック: API Gateway CORS を有効にする
            リソースの作成 ボタン:
            選択: /ride （リソース）
            アクション >> メソッドの作成: POST
            チェック ボタン:
            統合タイプ: Lambda 関数
            チェック(2): Lambda プロキシ統合の使用
            Lambda 関数: RequestUnicorn
            保存 ボタン:
            #// 権限を追加することの確認が表示されます
            OK ボタン:
            メソッドリクエスト:
                認可：WildRydes  #template: __AppNamePascalCase__
        API をデプロイします:
            メニュー: アクション >> API のデプロイ
            デプロイされるステージ: [新しいステージ]
            ステージ名: prod
            デプロイ ボタン:
            URL の呼び出しの右の URL をメモします:
                https://abcdrsnmud.execute-api.ap-northeast-1.amazonaws.com/prod
                    #template: __API_GatewayURL__
        アプリケーションに API の URL を設定します（ウェブサイトの設定を更新する）:
            wildrydes-site/js/config.js を編集します: |  #template: __RepositoryName__/js/config.js
                invokeUrl: 'https://abcdrsnmud.execute-api.ap-northeast-1.amazonaws.com/prod',
                    #template: __API_GatewayURL__
            コミットします:
                #Git bash
                - cd  "wildrydes-site"  #template: "__RepositoryName__"
                - git add "."
                - git commit -a -m "Set API related ID"
                - git push
            デプロイが完了するまで待ちます:
                メニュー: https://console.aws.amazon.com/amplify/home >> wildrydes-site  #template: __RepositoryName__
        実装を検証します:
            - AWS Amplify Console から Web アプリケーションを開き、https://____.amplifyapp.com/ride.html
                にアクセスして、ブラウザーをリロードします
            - マップがロードされたら、マップ上の任意の場所をクリックして、乗る場所を設定します
            - Request Unicorn ボタンを押します
    URL を自社のドメイン（カスタムドメイン）に変更します:
        参考: サードパーティDNSプロバイダーが管理するカスタムドメインの追加
            https://docs.aws.amazon.com/ja_jp/amplify/latest/userguide/to-add-a-custom-domain-managed-by-a-third-party-dns-provider.html
        自分が使えるドメイン(URL)を用意します（カスタムドメインを Route 53 に登録する）:
            aws の場合（有料）: #// 設置後12時間以内の利用であれば無料らしい
                参考: https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register.html
                メニュー: https://console.aws.amazon.com/route53/ >> 登録済みドメイン（左） >> ドメインの登録（上）
                続き: （未確認）
            Freenom の場合（無料）:
                #// .tk（ニュージーランドの領土であるトケラウ）などレアな TLD （トップ レベル ドメイン）を持つドメインを取得できます
                http://www.freenom.com/en/index.html >> __NewDomain__ >> Check Availability >>
                Checkout（右上） >> Continue >> （メールアドレスを入力） >> Verify My Email Address >>
                受信したメールの中にあるボタンをPCから押す） >> （名前などを入力する）
                #// 3か月後（設定による）に更新を忘れないこと
        ドメインを Route53 のホストゾーンに追加します:
            参考: https://avinton.com/academy/route53-dns-vhost/
            メニュー: https://console.aws.amazon.com/route53/ >> ホストゾーン（左） >> ホストゾーンの作成（下）
            ドメイン名: sage-p.tk  #template: : __Domain__
            OK: ホストゾーンの作成 ボタン
        ACM（AWS Certificate Manage）に証明書を管理させます:
            参考: https://labs.mobingi.com/aws-certificate-manager-and-freenom/
            メニュー: https://console.aws.amazon.com/acm/home >> 証明書のプロビジョニング >> 今すぐ始める >>
                証明書のリクエスト ボタン（右下）
            ドメイン名: sage-p.tk  #template: : __Domain__
            この証明書に別の名前を追加 ボタン:
            ドメイン名2: "*.sage-p.tk"  #template: "*.__Domain__"
                #// 上記 " " の中を入力します
            次へ ボタン:
            検証方法の選択: DNS の検証
            操作: 次へ >> 確認 >> 確定とリクエスト >> （検証保留中が表示される） >> 続行 >>
                sage-p.tk >> Route 53 でのレコードの作成 ボタン （同じ値なので片方のボタンだけ押せばよい）
                    #template: __Domain__ >> Route 53 でのレコード
                #// CNAME リソース レコードが Route 53 に登録されます
            もし、Route 53 でのレコードの作成 ボタンが押せないときは、手動で CNAME リソース レコードを追加します:
                必要な CNAME の設定を調べます（ACM が提供する CNAME の場合）:
                    メニュー: https://console.aws.amazon.com/acm/home >>
                        sage-p.tk（の左の▲） >> ドメインの左の▲
                            #template: __Domain__（の左の▲） >> ドメインの左の▲
                    CNAME の例:
                        名前: _51a78045aa6d7b88d8hyg70253c19812e.sage-p.tk.  #template: .__Domain__.
                        種類: CNAME
                        値: _ffd077863ba1518d6c169c7f4a06726b.zbkrxsrfvj.acm-validations.aws.
                Route 53 に CNAME を設定します:
                    メニュー: https://console.aws.amazon.com/route53/ >> レコードを作成
                    ルーティングポリシー: シンプルルーティング
                    次へ ボタン:
                    シンプルなレコードを定義 ボタン:
                        レコード名: ____  #// CNAME の名前
                        値/トラフィックのルーティング先:
                            - レコードタイプに応じた IP アドレスまたは別の値
                            - ____  #// CNAME の値
                        レコードタイプ: CNAME
                        シンプルなレコードを定義 ボタン:
                    レコードを作成 ボタン:
                #// サブドメインに対する CNAME は同じ値なので追加する CNAME は１つです
        （freenomを使っている場合）ネームサーバーを変更します:
            参考1: https://note.com/dafujii/n/n12bb564081f1
            参考2: https://dev.classmethod.jp/articles/mesoko-r53-cdn/
            NS レコードの値ネームサーバーのアドレスをメモします:
                メニュー: https://console.aws.amazon.com/route53/ >> ホストゾーン （左） >> sage-p.tk  #template: >> __Domain__
                操作: レコード名 = sage-p.tk, タイプ = NS の行の「値/トラフィックのルーティング先」の列にある4つの値をメモします
                    #template: レコード名 = __Domain__,
                例:
                    - ns-63.awsdns-07.com.
                    - ns-649.awsdns-17.net.
                    - ns-1037.awsdns-01.org.
                    - ns-1702.awsdns-20.co.uk.
            freenom 内での設定変更:
                メニュー: http://www.freenom.com/en/index.html >> (Sign in) >> Services >> My Domains >>
                    Manage Domain（行末） >> Management Tools
                Nameservers: Use custom nameservers(enter below)
                Nameserver1～4 に、メモした ns- から始まりピリオドで終わる4つの値を貼り付ける:
                    #// 末尾のピリオドも必要です
                Change Nameservers ボタン:
        Amplify Console に自社のドメインを設定します:
            メニュー: https://console.aws.amazon.com/amplify/ >> wildrydes-site >> ドメインの管理（左）  #template: __RepositoryName__
            カスタムドメインの追加（ボタン）:
                ドメイン: sage-p.tk  #template: __Domain__
                ドメインの検索 ボタン:
                Exclude root ボタンを押して、https://sage-p.tk を削除します:  #template: __Domain__
                    #// 理由は、Route53 で取得していないドメインでは、
                    #// 下記「Route53 の ANAME レコードの値は aws の外部に設定できません」
                    #// に書いてあるように https://sage-p.tk にアクセスできないからです
                保存 ボタン:
                Status details の図が表示され、SSL configuration の処理中になるまで待ちます:
        （もし、CNAME を設定するように表示されたときは）Route 53 に必要な設定を表示します:
            DNS 設定の検証 のモーダルを開きます:
                アクション >> DNS レコードの表示 メニュー:
                表示例:
                    - _d49df321977f2b1d57b81408d67fac2d    CNAME    _3184fb03fe5baf52bfcda86050767f3a.zbkrxsrfvj.acm-validations.aws.
                        #// 上記 CNAME の左（名前）は、ドメイン（.sage-p.tk.）が表示されていません（awsのバグ） #template: .__Domain__.
                    - '@    ANAME    dbwdcgexf1sy9.cloudfront.net'
                    - www    CNAME    dbwdcgexf1sy9.cloudfront.net
                この DNS 設定の検証 のモーダルを表示させたままにします:
            上記「手動で CNAME リソース レコードを追加します」を参考に CNAME を設定します:
                #// 設定が正しくできていれば自動的に Status details の図が更新されます
                #// Route53 の ANAME レコードの値は aws の外部に設定できません（ツイッター検索「Route53 ANAME」より）
                #// このため、 https://sage-p.tk はアクセスできません。 https://www.sage-p.tk はアクセスできます
                    #template: https://__Domain__ はアクセスできません。 https://www.__Domain__ はアクセスできます
            DNS 設定の検証 のモーダルを閉じます:
    リソースのクリーンアップ:
        #// 以下は Amplify Console から削除する場合です
        #// コマンドを使う場合は、上記「amplify delete コマンドを使ってクリーンする場合」を参照
        aws のリージョンを選択します:
            AWS マネジメント コンソールにサインインします:
                URL: https://console.aws.amazon.com/
                （ユーザー）: IAM ユーザー
                アカウントID: 123456789012  #template: __AWS_AccountID__
                次へ ボタン:
                ユーザー名: user1  #template: __AWS_UserName__
                パスワード: __AWS_UserPassword__
                サインイン ボタン:
            リージョン: 東京 （右上） #template: __RegionName__
            OK: ブラウザーを閉じます
        Amplify Console の削除:
            - https://console.aws.amazon.com/amplify/home >> wildrydes-site  #template: __RepositoryName__
            - アクション >> アプリの削除
        （freenom を使っている場合）freenom 内での設定変更:
            メニュー: http://www.freenom.com/en/index.html >> (Sign in) >> Services >> My Domains >>
                Manage Domain（行末） >> Management Tools
            Nameservers: Use default nameservers (Freenom Nameservers)
            Change Nameservers ボタン:
        Route 53 の削除:
            - https://console.aws.amazon.com/route53/ >> ホストゾーン （左） :
                - ドメイン名 = sage-p.tk の行:  #template: __Domain__
                    - タイプ = NS, SOA 以外（のすべての行の行頭にチェック） >> 削除
                - ドメイン名 = sage-p.tk （の行の左にチェック） >> 削除（上）  #template: __Domain__
        ACM（AWS Certificate Manage）の削除:
            - https://console.aws.amazon.com/acm/home >> sage-p.tk（の左にチェック） >> アクション >> 削除
        CloudFormation の stack の削除:
            - https://ap-northeast-1.console.aws.amazon.com/cloudformation/home >> ネストの表示をオフ >>
                amplify-wildrydes-site-design-...
                    #template: amplify-__RepositoryName__-design-...
        Cognito ユーザープールの削除:
            - https://ap-northeast-1.console.aws.amazon.com/cognito/ >> ユーザープールの管理 >>
                prod-wildrydes-site
            - プールの削除（右上）
        Lambda の削除:
            - https://console.aws.amazon.com/lambda/ >> RequestUnicorn （の左をチェック）
            - アクション >> 削除
        IAM の削除:
            - https://console.aws.amazon.com/iam/ >> ユーザー:
                - user-dev1 の左にチェック >> （必要なら）ユーザーの削除
                    #template: __IAM_UserName__
            - https://console.aws.amazon.com/iam/ >> ロール:
                - 作成時刻でソート
                - WildRydesLambda の左にチェック >> ロールの削除
                    #template: __AppNamePascalCase__Lambda
            - https://console.aws.amazon.com/iam/ >> グループ:
                - Developers の左にチェック >> グループのアクション >> （必要なら）グループの削除
        DynamoDB >> テーブル の削除:
            - https://console.aws.amazon.com/dynamodb/ >>  テーブル
            - Rides の左にチェック >> アクション >> テーブルの削除
        API Gateway の削除:
            - https://console.aws.amazon.com/apigateway/ >> WildRydes  #template: __AppNamePascalCase__
            - アクション >> API の削除
        CloudWatch >> ログ の削除:
            - https://ap-northeast-1.console.aws.amazon.com/cloudwatch/ >> ロググループ
            - /aws/lambda/RequestUnicorn >> アクション >> ロググループの削除
        Amplify との接続を解除するように GitHub を設定します（管理者）:
            メニュー: https://github.com/ >> （ Takakiriy のプロフィール写真） >> Settings >> Applications（左下）
                #template: （ __GitHubOwnerAccount__ のプロフィール写真）
            Installed GitHub Apps （タブ）:
                - (AWS Connector for GitHub) >> Configure
                - (Uninstall "AWS Connector for GitHub")（最も下）>> Uninstall
            Authorized OAuth Apps （タブ）:
                - (Git Credential Manager) >> … >> Revoke >> I understand, revoke access
            ブラウザーを閉じます:
        （必要なら）GitHub のリポジトリを削除します:
            - https://github.com/ >> （左上の GitHub アイコン） >> Takakiriy/wildrydes-site
                #template: __GitHubOwnerAccount__/__RepositoryName__
            - Settings（タブ。ウィンドウ幅が狭いときは … の中にある） >> （いちばん下へスクロール） >>
                Delete this repository >> Takakiriy/wildrydes-site
                    #template: __GitHubOwnerAccount__/__RepositoryName__

メモ:
    （書きかけ）アプリケーションの URL を調べてメモします:
        設定: #settings:
            __AppURL__: https://master.d32anw0j12k1z4.amplifyapp.com/
        コマンド:
            #bash など
            - amplify status
            #// Amplify hosting urls: をメモします
        URL: https://master.d32anw0j12k1z4.amplifyapp.com/  #template: __AppURL__
        __Project__/cypress.json の baseURL フィールドを設定します: |
            {
                "baseUrl": "https://master.d32anw0j12k1z4.amplifyapp.com/",  "comment": "#template: __AppURL__"
            }

    （書きかけ）CI/CD パイプラインで Jest によるテストが失敗したときに警告されるようにします:
        amplify.yaml (amplify.yml) を編集します:
            - https://ap-northeast-1.console.aws.amazon.com/amplify/home >>
            - own >> ビルドの設定 >> 編集

        たとえば __Project__/src/App.test.tsx を変更します:
            before:
                expect(linkElement).toBeInTheDocument();
            after:
                expect(linkElement).not.toBeInTheDocument();
        コミットします:
            - git add "."
            - git commit -a -m "Test of CI/CD pipeline"
            - git push
            - https://ap-northeast-1.console.aws.amazon.com/amplify/home
        失敗したことを確認したら、成功するように戻します:
