type Post
    @model (subscriptions: { level: public })
    @auth(rules: [
            {allow: owner, ownerField:"owner", provider: userPools, operations:[read, create]}
            {allow: private, provider: userPools, operations:[read]},
            {allow: private, provider: iam ,operations:[create]},
        ])
    @key(name: "SortByTimestamp", fields:["type", "timestamp"], queryField: "listPostsSortedByTimestamp")
    @key(name: "BySpecificOwner", fields:["owner", "timestamp"], queryField: "listPostsBySpecificOwner")
{
    type: String!  #// always set to 'post'. used in the SortByTimestamp GSI
    id: ID
    content: String!
    owner: String
    timestamp: AWSTimestamp!
}

type FollowRelationship
    @model
    @auth(rules: [
        {allow: owner, ownerField:"followerId", provider: userPools, operations:[read, create]},
        {allow: private, provider: userPools, operations:[read]},
        {allow: private, provider: iam ,operations:[read]},
    ])
    @key(fields: ["followeeId", "followerId"])
{
    followeeId: ID!
    followerId: ID!
    timestamp: AWSTimestamp!
}

type Timeline 
	@model
	@auth(rules: [
        {allow: owner, ownerField: "userId", provider: userPools, operations:[read, create]},
        {allow: private, provider: iam ,operations:[create]},
	])
	@key(fields: ["userId", "timestamp"])
{
	userId: ID!
	timestamp: AWSTimestamp!
	postId: ID!
	post: Post @connection(fields: ["postId"])
}

type Mutation
{
    createPostAndTimeline(
            content: String!
    ): Post
        @function(name: "createPostAndTimeline-${env}")
        @auth(rules: [
            {allow: private, provider: userPools},
        ])
}
