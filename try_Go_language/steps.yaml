インストール:
    Ubuntu on WSL2 の場合:  #keyword: install Go WSL2 VSCode
        （初回のみ）:
            WSL2 と Visual Studio Code をインストールします:
                #search: install WSL2 Ubuntu VSCode
            Go言語 をインストールします:
                ダウンロードして展開します:
                    cd $HOME
                    curl -OL https://go.dev/dl/go1.19.5.linux-amd64.tar.gz
                    sudo tar -C /usr/local -xvf go1.19.5.linux-amd64.tar.gz
                PATH を通します:
                    sudo nano ~/.profile :  #// 最後に追加
                        export PATH=$PATH:/usr/local/go/bin
                    設定を有効にします:
                        source ~/.profile
                    確認します:
                        go version
            Visual Studio Code で Go言語 を使えるようにします:
                プロジェクトをホームにコピーします:
                    copy a go project to ~/try_go   #ref: ${GitHub}/Trials/go/try_go
                Visual Studio Code で開きます:
                    code ~/try_go
                gopls をインストールします:
                    .go ファイルを開きます
                    Run and Debug ボタン（左）>> create a laungh.json file >> Install an extension for Go... >> Install
                    （gopls の）Install ボタン（右下）
                    .go ファイルを開きます
                    F5 キー >> （gopls の）Install ボタン（右下）
                    F5 キー
        （2回目以降）:
            Visual Studio Code で Go言語プロジェクト を開いて、デバッグ実行します:
                code ~/try_go
                .go ファイルを開きます
                F5 キー
        try_go プロジェクト:  #search: try_go
    Go言語と Visual Studio Code を Windows 10 にインストールしてデバッグ実行します:  #keyword: install Go Windows VSCode
        設定: #settings:
            __ProjectName__: try  #ref: ${GitHub}/Trials/go/Windows
        ローカルPCへ各種ソフトウェアをインストールします:
            Go言語をインストールします:
                - https://golang.org/dl/ >> Microsoft Windows >> ...msi をダウンロードして実行
                - インストール オプションはデフォルトで構いません
            Visual Studio Code をインストールします:
                - https://code.visualstudio.com/
                - オプションはすべてデフォルト
                - 必要なら、Visual Studio Code をタスクバーにピン止めします
                - 以下の拡張機能（Extensions）をインストールします:
                    - Go
            Go言語の各種ツールをインストールします:
                F1 キー: |
                    Go: Install/Update Tools
                全てのツールを選択します:
                    最も上のボックスをクリックすると全部選択します
            （この手順では不要、参考）Go言語のインストール状況を表示します:
                F1 キー: |
                    Go: Locate Configured Go Tools
        ${env:USERPROFILE}\go\src フォルダーを作ります:
            #// PowerShell
            mkdir ${env:USERPROFILE}\go\src
        Visual Studio Code で ${env:USERPROFILE}\go\src を開きます:
            #// PowerShell
            code ${env:USERPROFILE}\go\src  #// 以後 __go_src__ とします
        go.mod ファイルを初期化します:
            シェル:
                 go mod init try  #template: init __ProjectName__
        Go言語のソース ファイルを作成します:
            __go_src__\example_test.go : |
                package main // このソースが所属するパッケージの名前

                import (
                    "fmt" // format  // インポートするパッケージ
                    "testing"
                )

                func main() { // function  // 関数定義
                    fmt.Println("Hello, playground") // print line  // 実行内容
                }

                func add(x int, y int) int {
                    return x + y
                }

                func TestExample(t *testing.T) {
                    main()
                }
        fmt.Println で出力されるように設定します:
            __go_src__/.vscode/settings.json : |
                {
                    "go.testFlags": ["-v"]
                }
        （もし、Install All ボタンが表示されたら）推奨されるインストールを実行します:
            上記ソース ファイルを保存すると、Install All ボタンが右下に表示されるので押します
        実行します:
            TestExample 関数の定義の上にある run test をクリックします
        デバッグ実行します:
            ブレーク ポイントを張ります:
                fmt.Println を呼び出す行の行番号の左をクリック
            デバッグ実行を開始します:
                TestExample 関数の定義の上にある debug test をクリックします
            ブレークしたとき:
                ステップ実行する: F10 キー
                ステップインする: F11 キー
                実行を再開する: F5 キー
            fmt.Println の出力を表示します:
                Terminal（右下のビュー）>> DEBUG CONSOLE（Terminalの上）
    CentOS7 に Go言語をインストールします:  #keyword: install Go CentOS7
        新しくプロジェクトを作る場合:
            設定: #settings:
                __ProjectName__: try_go  #ref: ${GitHub}/Trials/go/try_go
                __Parent__: /vagrant
            CentOS7 をインストールします:
                #search: CentOS7 Vagrant
                ただし、メモリーを増やすこと:
                    vb.memory = 512  #// MB
            VSCode で CentOS7 に SSH 接続します:
                #search: VSCode SSH Remote Explorer
            Go 言語をインストールします:  #// Go 言語の最新版を使う場合
                (@CentOS7):
                    - sudo yum install -y epel-release
                    - sudo yum install -y golang
                    - go version
            Go 言語プロジェクトを新規作成します:
                - mkdir /vagrant/try_go            #template: __Parent__/__ProjectName__
                - cd    /vagrant/try_go            #template: __Parent__/__ProjectName__
                - go mod init example.com/try_go   #template: __ProjectName__
            /vagrant/try_go/main/example_test.go : |  #template: __Parent__/__ProjectName__
                package main

                import (
                    "testing"
                )

                func TestExample(t *testing.T) {
                    main()
                }
            /vagrant/try_go/main/example.go : |  #template: __Parent__/__ProjectName__
                package main

                import "fmt"

                func main() {
                    fmt.Println("Hello, playground")
                }
            VSCode の各種拡張機能をインストールします:
                VSCode の Go 拡張機能をインストールします:
                    VSCode (@CentOS7) >> Extensions >> go（と入力）>> install
                The "gopls" command is not available:
                    が表示されたら: Install All ボタン
                    以下が表示されるまで待ちます:  #// 約3分
                        OUTPUT タブ（右下）: |
                            Installing golang.org/x/tools/gopls@latest (/home/vagrant/go/bin/gopls) SUCCEEDED
                            または
                            fatal: git fetch-pack: expected shallow list
                    dlv のインストールが失敗したら:
                        VSCode >> TERMINAL タブ（右下）:
                            /usr/bin/go install -v github.com/go-delve/delve/cmd/dlv@latest
            実行します:
                TestExample 関数(in example_test.go)の定義の上にある run test をクリックします
                ok  	example.com/try_go/main	0.002s
                が表示されます。
            main 関数をデバッグ実行します:
                __Project__/.vscode/launch.json: |  #search: Go launch.json
                    {
                        "version": "0.2.0",
                        "configurations": [
                            {
                                "name": "Go: Debug",
                                "type": "go",
                                "request": "launch",
                                "mode": "auto",
                                "cwd": "${workspaceFolder}",
                                "program": "${workspaceFolder}/try_go/main/example.go",
                                "showLog": false
                            }
                        ]
                    }
                F5 キーを押します:
            テストをデバッグ実行します:
                ブレーク ポイントを張ります:
                    fmt.Println を呼び出す行の行番号の左をクリック
                デバッグ実行を開始します:
                    TestExample 関数の定義の上にある debug test をクリックします
                ブレークしたとき:
                    ステップ実行する: F10 キー
                    ステップインする: F11 キー
                    実行を再開する: F5 キー
            CLI から実行します:
                #bash
                - cd /vagrant/try_go      #template: __Parent__/__ProjectName__
                - go run main/example.go
        上記のプロジェクトを動かした VM がある場合:
            VM の電源を入れます:
                #search: VirtualBox VM start
            VSCode を開きます:
                PowerShell:
                    code --remote ssh-remote+go_centos7 vagrant
                #// go_centos7 は必要に応じて編集します  #search: VSCode open folder
            Go 言語の ソース ファイル を開きます:
                cd /vagrant/try_go 
                code main/example.go
            デバッガーなしで起動します:
                go run main/example.go
            デバッガーありで起動します:
                F5 キーを押します
        その他の既存のプロジェクトを使う場合:
            #// ★未確認
            参考: Install Go 1.14 on CentOS 8 | CentOS 7  https://computingforgeeks.com/how-to-install-go-on-centos-centos-linux/
            設定: #settings:
                __GoVersion__: 1.13
            go.mod ファイルがある場合:
                go.mod ファイルに書かれた go のバージョンをメモします:
                    __GoVersion__: 1.13  #template: __GoVersion__
                #// 古いバージョンをインストールできない
    go get でプロジェクトをインストールして実行します:
        準備:
            Git for Windows をインストールします:
                - https://git-scm.com/ >> Downloads >> Windows
                - インストール オプションはデフォルトで構いません
            Visual Studio Code を開いていたら閉じます:
        Visual Studio Code で ${env:USERPROFILE}\go\src を開きます:
            #// PowerShell
            code ${env:USERPROFILE}\go\src  #// 以後 __go_src__ とします
        Visual Studio Code のターミナルを開きます:
            Terminal >> New Terminal (PowerShell)
        hello をインストールします:
            参考: https://github.com/golang/example
            PowerShell:
                go get github.com/golang/example/hello
        デバッグ実行します:
            - __go_src__\strings\example_test.go を開きます
            - F5 キーを押し、Go を選びます
        実行します:
            - __go_src__\strings\example_test.go を開きます
            - Ctrl + F5 キーを押し、Go を選びます
    Google/wire をインストールします:
        - go get github.com/google/wire/cmd/wire
        - cat ~/.bashrc | grep wire
        - 上記コマンドを実行して何も表示されなかったら:
            - echo 'export PATH="$HOME/go/bin:$PATH"' >> ~/.bashrc
            - source ~/.bashrc
CLI パラメーター:
    viper:  #// 設定ファイルと CLI パラメーター を組み合わせます
        サンプル: |  #// Go 言語  #focus: viper.GetString,  viper.BindPFlag
            package main

            import (
                "log"

                "github.com/spf13/viper"
            )

            func main() {
                viper.SetConfigName("settings")       // 設定ファイルが見つからないとエラーになります
                viper.SetConfigType("yaml")           // 設定ファイルは settings.yaml ファイル
                viper.AddConfigPath(".")              // 設定ファイルは カレント フォルダー 内、
                viper.AddConfigPath("$HOME/.appname") // または $HOME/.appname フォルダー内

                viper.AutomaticEnv()      // 環境変数にも対応
                viper.SetEnvPrefix("app") // 環境変数の接頭辞。例 APP_NAME

                rootCmd := cobra.Command{}
                rootCmd.PersistentFlags().StringSlice(flagKafkaHosts, []string{"localhost:9092"}, "kafka topic")  // CLI オプション
                viper.BindPFlag("kafka.hosts", c.PersistentFlags().Lookup(flagKafkaHosts))  // 設定ファイルを CLI オプション でも指定できるようにします

                err := viper.ReadInConfig()
                if err != nil {
                    log.Fatal(err)
                }

                log.Print(viper.GetString("name")) // YAML なら name, 環境変数なら APP_NAME
            }
トラブルシューティング(Go言語):
    - #// could not import
        コマンド: Visual Studio Code でコードを開いているとき
        エラー: |
            could not import __ImportParameter__ (missing metadata for import of "__ImportParameter__")
            compiler(BrokenImport)
        原因: import 文の基準フォルダーが正しくないか、import 文に指定したパスが正しくないです
        対策A: Visual Studio Code で開くフォルダーを go.mod ファイルがあるフォルダーにします
        対策B: __ImportParameter__ が指すパッケージに含まれるコードの先頭にある package にエラーが発生していたらそちらを解決させます
    - #// import cycle not allowed
        コマンド: Visual Studio Code でコードを開いているとき
        エラー: |
            import cycle not allowed: import stack: [command-line-arguments __ImportParameterA__ __ImportParameterB__ __ImportParameterA__] go list
        原因: import 文によるパッケージ参照が循環参照しています
        対策: エラーメッセージにヒントがあります。 所有親などに新しく書いたコードを移動するなど  #search: import 循環参照
    - #// could not build arguments for function
        エラー: |
            could not build arguments for function __InvokedName__ (__Path__): failed to build __Type__:
            received non-nil error from function __ProvidedName__ (__Path__): __ErrorMessage__
        原因: __ProvidedName__ の関数でエラーが発生しました
