#// サーバーレスのウェブアプリケーションを構築します
#// AWS Lambda、Amazon API Gateway、AWS Amplify、Amazon DynamoDB、および Amazon Cognito を使用
参考: https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/

設定:
    __RegionName__: 東京  #// CodePipeline のパイプラインを作成するリージョンの名前
    __RegionID__: ap-northeast-1  #// __RegionName__ の ID
    __IAM_UserName__: user-dev  #// IAM ユーザー（開発用）、AWS CLI で必要な権限を持つ
    __IAM_UserAccessKeyID__: AKIAZQ2CH423P67RPDNA  #// 手順内でメモする値
    __SecretAccessKey__: AhiRlFd10ZYJClp4FDTlkIl2ZTiLnLJI3jFLhaFf  #★秘密:仮  #// 手順内でメモする値
    __GitHubOwnerAccount__: Takakiriy  #// リポジトリのオーナーのアカウント名
    __GitHubCollaboratorAccount__: Takakiriy  #// リポジトリにアクセスするユーザーのアカウント名
    __GitCollaboratorName__: Your Name        #// git log コマンドで表示されるユーザー名
    __GitCollaboratorMail__: you@example.com  #// git log コマンドで表示されるメールアドレス
    __RepositoryName__: wildrydes-site
    __ProductBranchName__: master  #// 本番用のブランチ名

Amplify Console + GitHub でフロントエンドの CI/CD 環境を構築します:
    参考: https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-1/
    ローカルPCへ各種ソフトウェアをインストールします:
        Git for Windows をインストールします:
            - https://git-scm.com/ >> Downloads >> Windows
            - ダウンロードしたファイル（例：Git-2.24.1.2-64-bit.exe）を開く
            - Next を8回押す
            - Configuring the line ending conversions: Checkout as-is, commit as-is
            - 他のインストール オプションはデフォルトを使用
            - デスクトップを右クリック >> Git Bash Here
            - git clone  "https://github.com/githubtraining/hellogitworld.git"
            - 成功したら、デスクトップにある hellogitworld フォルダーを削除する ( rm -rf hellogitworld )
        （ダウンロード（クローン）するリポジトリにコミットする可能性があるとき）Git のユーザー名を設定します:
            - git config --global user.email "you@example.com"  #template: "__GitCollaboratorMail__"
            - git config --global user.name  "Your Name"        #template: "__GitCollaboratorName__"
        bash を閉じます:
    aws のアカウントを作成します:
    aws のリージョンを選択します:
        AWS マネジメント コンソールにサインインします:
            URL: https://console.aws.amazon.com/
            （ユーザー）: IAM ユーザー
            アカウントID: __AWS_AccountID__
            OK: 次へ ボタン
            ユーザー名: __AWS_UserName__
            パスワード: __AWS_UserPassword__
            OK2: サインイン ボタン
        リージョン: 東京 （右上） #template: __RegionName__
        OK: ブラウザーを閉じます
    AWS CLI をインストールしてセットアップします:
        参考: https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-windows.html
        AWS CLI をインストールします:
            - https://awscli.amazonaws.com/AWSCLIV2.msi
            - インストール オプションはデフォルトを使用
            #Git bash
            - aws --version  #// aws-cli/2.0.58 Python/3.7.7 Windows/10 exe/AMD64
        IAM ユーザー（開発用）がなければ作成します:
            Developers グループがなければ作成します:
                メニュー: https://console.aws.amazon.com/iam/ >> グループ >> 新しいグループの作成
                グループ名: Developers
                OK: 次のステップ ボタン
                選択するポリシー:
                    - AWSLambdaFullAccess
                    - AmazonAPIGatewayAdministrator
                    - AmazonDynamoDBFullAccess
                    - AmazonCognitoPowerUser
                    #// 上記は暫定です
                    #// 後でアクセスできるリソースを制限します
                OK2: 次のステップ ボタン
                OK3: グループの作成 ボタン
            IAM ユーザー（開発用）を作成します:
                メニュー: https://console.aws.amazon.com/iam/ >> ユーザー >> ユーザーを追加
                ユーザー名: user-dev1  #template: __IAM_UserName__
                アクセスの種類:
                    プログラムによるアクセス: チェック
                    AWS マネジメントコンソールへのアクセス: なし
                    OK: 次のステップ ボタン
                ユーザーをグループに追加:
                    選択するグループ:
                        - Developers
                    OK: 次のステップ ボタン
                タグの追加:
                    OK: 次のステップ ボタン
                確認:
                    OK: ユーザーの作成 ボタン
                アクセスキーをメモします:
                    アクセスキー ID: AKIAZQ2CH423P67RPDNA  #template: __IAM_UserAccessKeyID__
                    シークレットアクセスキー: AhiRlFd10ZYJClp4FDTlkIl2ZTiLnLJI3jFLhaFf  #template: __SecretAccessKey__
                    OK: 閉じる ボタン
        定期的にアクセスキーを更新します:
            https://console.aws.amazon.com/iam/ >> ユーザー >> (ユーザー名) >> 認証情報（タブ） >>
                アクセスキーの作成 ボタン
        AWS CLI と IAM ユーザーを結びつけます（ローカルPCにアクセスキーを設定します）:
            #Git bash
            - aws configure:
                AWS Access Key ID [None]: AKIAZQ2CH423P67RPDNA  #template: __IAM_UserAccessKeyID__
                AWS Secret Access Key [None]: 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  #template: __SecretAccessKey__
                Default region name [None]: ap-northeast-1   #template: __RegionID__
                Default output format [None]: （なし）
        AWS CLI がセットアップできたかどうかを確認します:
            #Git bash
            - aws s3 ls  #// エラーにならないこと (Unable to locate credentials エラー) 
    Git リポジトリを作成します:
        #// 下記は GitHub を使う場合です
        #// チュートリアルでは、 wildrydes-site #template: __RepositoryName__
        GitHub のアカウントを作成します:
        GitHub にサインインします:
            メニュー: https://github.com/ >> 三（右上） >> Sign in
            Username or email address: Takakiriy  #template: __GitHubOwnerAccount__
            Password: ____
            OK: Sign in ボタン
            OK2: ブラウザーを閉じます
        GitHub にリポジトリを新規作成します:
            リポジトリを作成します:
                メニュー: https://github.com/ >> （左上の GitHub アイコン） >> （Repositories）New
                Repository name: wildrydes-site  #template: __RepositoryName__
                Public or Private: Private
                OK: Create repository
                OK2: ブラウザーを閉じます
            プライベート リポジトリに接続してダウンロード（クローン）します:
                #Git bash:
                - cd  "__ParentOfProject__"
                - git clone "https://github.com/Takakiriy/wildrydes-site.git"  #template: https://github.com/__GitHubOwnerAccount__/__RepositoryName__.git
                    #// ここでエラーになるときは Git をアンインストール＆インストールしてください
                - Sign in with your browser ボタン  #// プライベート リポジトリのときだけこのボタンが表示されます
                - 表示されたアカウント名を確認: wants to access your Takakiriy account
                    #template: wants to access your __GitHubCollaboratorAccount__ account
                - Authorize GitCredentialManager ボタン
                - 成功したらブラウザーを閉じます
    Git リポジトリを事前設定します:
        #Git bash
        - cd  "wildrydes-site"  #template: "__RepositoryName__"
        - aws s3 cp "s3://wildrydes-us-east-1/WebApplication/1_StaticWebHosting/website"  "./"  --recursive
        - git add "."
        - git commit -a -m "First commit"
        - git push
    AWS Amplify コンソールでウェブホスティングを有効にします:
        メニュー: https://console.aws.amazon.com/amplify/home >> (Deploy) >> GET STARTED
        From your existing code: GitHub
        OK: Continue ボタン
        表示されたアカウント名を確認: wants to access your Takakiriy account
            #template: wants to access your __GitHubCollaboratorAccount__ account
        Press: Authorize GitCredentialManager ボタン
        リポジトリ: Takakiriy/wildrydes-site  #template: __GitHubCollaboratorAccount__/__RepositoryName__
        ブランチ: master  #template: __ProductBranchName__
        OK2: 次へ ボタン
        OK3: 次へ ボタン  #// ビルドの設定はそのまま
        OK4: 保存してデプロイ
        #// プロビジョン >> ビルド >> デプロイ >> 検証 が完了するまで待ちます（約2分）
        #// https://..（左下）をクリックすると実行します
        #// master（右半分の左上）をクリックするとデプロイのログが表示されます
        #// ただし、まだフロントエンドしか動いていません
    Git リポジトリをコミットして自動的にデプロイされることを確認します:
        たとえば index.html を編集してタイトルバーに表示される内容を変更します: |
            <title>Wild Rydes - Rydes of the Future!</title>
        コミットします:
            #Git bash
            - cd  "wildrydes-site"  #template: "__RepositoryName__"
            - git add "."
            - git commit -a -m "Second commit"
            - git push
        確認します:
            メニュー: https://console.aws.amazon.com/amplify/home >> wildrydes-site  #template: __RepositoryName__

ユーザー認証機能を追加します（ユーザー管理）:
    参考: https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-2/
#★Now:
    Amazon Cognito ユーザープールを作成する:



#// develop ブランチも同様に作成する（？）
